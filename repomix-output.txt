This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
.prettierrc
components.json
Dockerfile
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/App.css
src/App.tsx
src/assets/diamond-svgrepo-com.svg
src/assets/gold-medal-svgrepo-com.svg
src/components/auth/AuthHandler.tsx
src/components/auth/ForgotPassword.tsx
src/components/auth/ResetPassword.tsx
src/components/auth/SignIn.tsx
src/components/auth/SignUp.tsx
src/components/auth/UserInfo.tsx
src/components/auth/VerifyEmail.tsx
src/components/calendar/DayView.tsx
src/components/calendar/MonthBox.tsx
src/components/calendar/MonthView.tsx
src/components/calendar/WeekView.tsx
src/components/header/CalendarHeader.tsx
src/components/header/CenterHeader.tsx
src/components/header/Header.tsx
src/components/header/LeftHeader.tsx
src/components/header/RightHeader.tsx
src/components/MainView.tsx
src/components/sidebar/CreateTask.tsx
src/components/sidebar/SideBar.tsx
src/components/ui/alert-dialog.tsx
src/components/ui/avatar.tsx
src/components/ui/button.tsx
src/components/ui/calendar.tsx
src/components/ui/card.tsx
src/components/ui/command.tsx
src/components/ui/date-picker.tsx
src/components/ui/dialog.tsx
src/components/ui/dropdown-menu.tsx
src/components/ui/event-popover.tsx
src/components/ui/feature-grid.tsx
src/components/ui/form.tsx
src/components/ui/input-otp.tsx
src/components/ui/input.tsx
src/components/ui/InputWithIcon.tsx
src/components/ui/label.tsx
src/components/ui/Logo.tsx
src/components/ui/nav-bar.tsx
src/components/ui/popover.tsx
src/components/ui/popup-calendar.tsx
src/components/ui/premium-list.tsx
src/components/ui/scroll-area.tsx
src/components/ui/select.tsx
src/components/ui/separator.tsx
src/components/ui/setting-pomodoro.tsx
src/components/ui/sheet.tsx
src/components/ui/sidebar.tsx
src/components/ui/skeleton.tsx
src/components/ui/task-popover.tsx
src/components/ui/textarea.tsx
src/components/ui/time-picker.tsx
src/components/ui/tooltip.tsx
src/hooks/use-mobile.ts
src/index.css
src/layout.tsx
src/lib/axios.ts
src/lib/utils.ts
src/main.tsx
src/pages/Auth.tsx
src/pages/Cleandar.tsx
src/pages/Dashboard.tsx
src/pages/Home.tsx
src/pages/LandingPage.tsx
src/pages/Pomodoro.tsx
src/pages/Premium.tsx
src/redux/auth/authSlice.tsx
src/redux/calendar/popupCalen.slice.tsx
src/redux/calendar/selectedDate.slide.tsx
src/redux/calendar/task.slice.tsx
src/redux/calendar/ViewMode.tsx
src/redux/page/pageSlice.tsx
src/redux/pomodoro/pomodoro.slice.tsx
src/redux/premium/premium.slice.tsx
src/redux/store.tsx
src/redux/user/user.slice.tsx
src/utils/click.tsx
src/utils/date.tsx
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

repomix-output.txt
package-lock.json

================
File: .prettierrc
================
{
  "plugins": ["prettier-plugin-tailwindcss"]
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: Dockerfile
================
FROM node:lts-alpine AS builder

WORKDIR /app

COPY package.json package-lock.json ./

RUN npm install --legacy-peer-deps

COPY . .

RUN npm run build

FROM nginx:alpine

COPY --from=builder /app/dist /usr/share/nginx/html

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/public/TaskRacerLogo.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Task Racer</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "task-racer",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@fontsource/baloo-2": "^5.2.5",
    "@hookform/resolvers": "^4.1.3",
    "@mui/icons-material": "^7.0.1",
    "@mui/material": "^7.0.1",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@reduxjs/toolkit": "^2.6.0",
    "@tailwindcss/vite": "^4.0.9",
    "axios": "^1.8.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "d3": "^7.9.0",
    "date-fns": "^3.6.0",
    "dayjs": "^1.11.13",
    "framer-motion": "^12.4.10",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.477.0",
    "react": "^19.0.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "react-icons": "^5.5.0",
    "react-redux": "^9.2.0",
    "react-router-dom": "^7.3.0",
    "redux": "^5.0.1",
    "tailwind-merge": "^3.0.2",
    "tailwindcss": "^4.0.9",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.13.9",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react-swc": "^3.8.0",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "prettier": "^3.5.3",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.24.1",
    "vite": "^6.2.0"
  }
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```

================
File: src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: src/App.tsx
================
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Auth from "./pages/Auth";
import AuthHandler from "./components/auth/AuthHandler";
import Premium from "./pages/Premium";
import Main from "./pages/Home";
import Home from "./pages/LandingPage";

export default function App() {
  return (
    <Router>
      <AuthHandler />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/auth" element={<Auth />} />
        <Route path="/premium" element={<Premium />} />
        <Route path="/main" element={<Main />} />
      </Routes>
    </Router>
  );
}

================
File: src/assets/diamond-svgrepo-com.svg
================
<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg"><title>70 Basic icons by Xicons.co</title><path d="M1,18.42L22.46,44.16a2,2,0,0,0,3.07,0L47,18.42H1Z" fill="#299acc"/><path d="M36.6,3.42H11.4A4,4,0,0,0,7.87,5.53L1,18.42H47L40.13,5.53A4,4,0,0,0,36.6,3.42Z" fill="#38b1e7"/><path d="M22.08,43.38L15,18.42H33l-7.08,25A2,2,0,0,1,22.08,43.38Z" fill="#61c0ea"/><polygon points="33 18.42 15 18.42 14 3.42 34 3.42 33 18.42" fill="#89d0ef"/></svg>

================
File: src/assets/gold-medal-svgrepo-com.svg
================
<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="-3.5 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9.73795 18.8436L12.9511 20.6987L6.42625 32L4.55349 27.8233L9.73795 18.8436Z" fill="#CE4444"/>
<path d="M9.73795 18.8436L6.52483 16.9885L0 28.2898L4.55349 27.8233L9.73795 18.8436Z" fill="#983535"/>
<path d="M14.322 18.8436L11.1088 20.6987L17.6337 32L19.5064 27.8233L14.322 18.8436Z" fill="#983535"/>
<path d="M14.322 18.8436L17.5351 16.9885L24.0599 28.2898L19.5064 27.8233L14.322 18.8436Z" fill="#CE4444"/>
<path d="M22.9936 11.0622C22.9936 17.1716 18.0409 22.1243 11.9314 22.1243C5.82194 22.1243 0.869249 17.1716 0.869249 11.0622C0.869249 4.9527 5.82194 0 11.9314 0C18.0409 0 22.9936 4.9527 22.9936 11.0622Z" fill="url(#paint0_linear_103_1801)"/>
<path d="M20.5665 11.0621C20.5665 15.8311 16.7004 19.6972 11.9315 19.6972C7.16247 19.6972 3.29645 15.8311 3.29645 11.0621C3.29645 6.29315 7.16247 2.42713 11.9315 2.42713C16.7004 2.42713 20.5665 6.29315 20.5665 11.0621Z" fill="#A88300"/>
<path d="M21.0477 11.984C21.0477 16.7641 17.1727 20.6391 12.3926 20.6391C7.61251 20.6391 3.73748 16.7641 3.73748 11.984C3.73748 7.20389 7.61251 3.32887 12.3926 3.32887C17.1727 3.32887 21.0477 7.20389 21.0477 11.984Z" fill="#C28B37"/>
<path d="M20.5868 11.0621C20.5868 15.8422 16.7118 19.7172 11.9317 19.7172C7.15159 19.7172 3.27656 15.8422 3.27656 11.0621C3.27656 6.28205 7.15159 2.40702 11.9317 2.40702C16.7118 2.40702 20.5868 6.28205 20.5868 11.0621Z" fill="#C09525"/>
<path d="M11.9781 5.04096L13.8451 8.77502L17.5792 9.24178L15.0151 12.117L15.7122 16.2431L11.9781 14.3761L8.24404 16.2431L8.94729 12.117L6.37701 9.24178L10.1111 8.77502L11.9781 5.04096Z" fill="url(#paint1_linear_103_1801)"/>
<defs>
<linearGradient id="paint0_linear_103_1801" x1="11.1804" y1="4.03192" x2="12.6813" y2="31.965" gradientUnits="userSpaceOnUse">
<stop stop-color="#FFC600"/>
<stop offset="1" stop-color="#FFDE69"/>
</linearGradient>
<linearGradient id="paint1_linear_103_1801" x1="11.9783" y1="5.04096" x2="11.9783" y2="16.2431" gradientUnits="userSpaceOnUse">
<stop stop-color="#FFFCDD"/>
<stop offset="1" stop-color="#FFE896"/>
</linearGradient>
</defs>
</svg>

================
File: src/components/auth/AuthHandler.tsx
================
import { useEffect } from "react";
import { useSelector } from "react-redux";
import { useLocation, useNavigate } from "react-router-dom";
import { RootState, useAppDispatch } from "@/redux/store";
import { fetchUserData } from "@/redux/user/user.slice";
import { refreshToken, setStep } from "@/redux/auth/authSlice";
import { fetchTasks } from "@/redux/calendar/task.slice";

const AuthHandler = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useAppDispatch();
  const accessToken: string | null = localStorage.getItem("accessToken");

  const { name, gender, birth, active } = useSelector(
    (state: RootState) => state.user,
  );

  useEffect(() => {
    if (!accessToken) {
      if (location.pathname !== "/auth" && location.pathname !== "/premium") {
        navigate("/");
      }
    } else {
      dispatch(refreshToken());
      dispatch(fetchUserData());
      dispatch(fetchTasks());
  
      if (!accessToken) {
        if (
          location.pathname !== "/auth" &&
          location.pathname !== "/premium" &&
          location.pathname !== "/"
        ) {
          navigate("/");
        }
      } else {
        dispatch(refreshToken());
        dispatch(fetchUserData());
        dispatch(fetchTasks());
      
        if (!active) {
          dispatch(setStep("verifyAccount"));
          if (location.pathname !== "/auth" && location.pathname !== "/premium") {
            navigate("/auth");
          }
        } else if (!name || !gender || !birth) {
          dispatch(setStep("userInfo"));
          if (location.pathname !== "/auth" && location.pathname !== "/premium") {
            navigate("/auth");
          }
        } else {
          if (location.pathname === "/" || location.pathname === "/auth") {
            navigate("/main");
          }
        }        
      }      
    }
  }, [accessToken, active, name, gender, birth, dispatch, navigate, location.pathname]);

  return null;
};

export default AuthHandler;

================
File: src/components/auth/ForgotPassword.tsx
================
"use client";

import { cn } from "@/lib/utils";
import { useForm } from "react-hook-form";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardFooter,
} from "../ui/card";
import { Button } from "../ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormMessage,
} from "../ui/form";
import { FiUser } from "react-icons/fi";
import { InputWithIcon } from "../ui/InputWithIcon";
import { setUserEmail, setStep } from "@/redux/auth/authSlice";
import Logo from "../ui/Logo";
import { sendOtpForgotPassword } from "@/redux/auth/authSlice";
import { useAppDispatch } from "@/redux/store";
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store";

export default function ForgotPassword() {
  const dispatch = useAppDispatch();
  const form = useForm({
    defaultValues: {
      account: "",
    },
  });
  const { loading, error } = useSelector((state: RootState) => state.auth.user);

  const onSubmit = (data: { account: string }) => {
    dispatch(setUserEmail(data.account));
    dispatch(sendOtpForgotPassword(data.account));
  };

  return (
    <Card className="w-full max-w-md">
      <CardHeader>
        <Logo />
        <CardTitle className="text-center text-lg">Quên mật khẩu</CardTitle>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form
            onSubmit={form.handleSubmit(onSubmit)}
            className="flex flex-col items-center space-y-4"
          >
            <div className="flex w-full justify-center">
              <FormField
                control={form.control}
                name="account"
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormControl>
                      <InputWithIcon
                        className="rounded-full"
                        type="text"
                        placeholder="Nhập tài khoản"
                        icon={<FiUser size={20} />}
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                    {error && (
                      <p className={cn("text-destructive text-center text-sm")}>
                        {error}
                      </p>
                    )}
                  </FormItem>
                )}
              />
            </div>
            <div className="flex w-full justify-center">
              <Button
                type="submit"
                className="w-60 cursor-pointer rounded-full"
              >
                Gửi yêu cầu
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Button
          variant="link"
          onClick={() => dispatch(setStep("signIn"))}
          className="cursor-pointer"
        >
          Quay lại đăng nhập
        </Button>
      </CardFooter>
    </Card>
  );
}

================
File: src/components/auth/ResetPassword.tsx
================
"use client";

import { useForm } from "react-hook-form";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardFooter,
} from "../ui/card";
import { Button } from "../ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormMessage,
} from "../ui/form";
import { IoLockClosedOutline } from "react-icons/io5";
import { InputWithIcon } from "../ui/InputWithIcon";
import { setStep } from "@/redux/auth/authSlice";
import Logo from "../ui/Logo";
import { changePassword } from "@/redux/auth/authSlice";
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store";
import { useAppDispatch } from "@/redux/store";

export default function ResetPassword() {
  const dispatch = useAppDispatch();
  const form = useForm({
    defaultValues: {
      newPassword: "",
      confirmPassword: "",
    },
  });

  const token = useSelector((state: RootState) => state.auth.user.resetToken);

  const onSubmit = (data: { newPassword: string; confirmPassword: string }) => {
    if (data.newPassword !== data.confirmPassword) {
      alert("Mật khẩu không khớp. Vui lòng nhập lại!");
      return;
    }

    dispatch(changePassword({ token, newPassword: data.newPassword }))
  
    console.log("New Password:", data.newPassword);
  };
  
  return (
    <Card className="w-full max-w-md">
      <CardHeader>
        <Logo />
        <CardTitle className="text-center text-lg">Đặt lại mật khẩu</CardTitle>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form
            onSubmit={form.handleSubmit(onSubmit)}
            className="flex flex-col items-center space-y-4"
          >
            <FormField
              control={form.control}
              name="newPassword"
              render={({ field }) => (
                <FormItem className="w-full">
                  <FormControl>
                    <InputWithIcon
                      className="rounded-full"
                      type="password"
                      placeholder="Nhập mật khẩu mới"
                      icon={<IoLockClosedOutline size={20} />}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="confirmPassword"
              render={({ field }) => (
                <FormItem className="w-full">
                  <FormControl>
                    <InputWithIcon
                      className="rounded-full"
                      type="password"
                      placeholder="Xác nhận mật khẩu"
                      icon={<IoLockClosedOutline size={20} />}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <Button type="submit" className="w-60 cursor-pointer rounded-full">
              Đặt lại mật khẩu
            </Button>
          </form>
        </Form>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Button
          variant="link"
          onClick={() => dispatch(setStep("signIn"))}
          className="cursor-pointer"
        >
          Quay lại đăng nhập
        </Button>
      </CardFooter>
    </Card>
  );
}

================
File: src/components/auth/SignIn.tsx
================
"use client";

// import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
// import { z } from "zod";

import { FcGoogle } from "react-icons/fc";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormMessage,
} from "@/components/ui/form";
import { InputWithIcon } from "../ui/InputWithIcon";
import { FiUser } from "react-icons/fi";
import { IoLockClosedOutline } from "react-icons/io5";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { setUserEmail, setUserPassword, setStep } from "@/redux/auth/authSlice";
import { fetchUserData } from "@/redux/user/user.slice";
import Logo from "../ui/Logo";
import { signInUser } from "@/redux/auth/authSlice";
import { useAppDispatch } from "@/redux/store";
import { RootState } from "@/redux/store";
import { useSelector } from "react-redux";
import { Loader2 } from "lucide-react";
import { cn } from "@/lib/utils";
// const signInSchema = z.object({
//   email: z.string().email({ message: "Email không hợp lệ" }),
//   password: z.string().min(6, { message: "Mật khẩu phải có ít nhất 6 ký tự" }),
// });

export default function SignIn() {
  const dispatch = useAppDispatch();
  const { loading, error } = useSelector((state: RootState) => state.auth.user);
  const form = useForm({
    // resolver: zodResolver(signInSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  const onSubmit = async (data: { email: string; password: string }) => {
    dispatch(setUserEmail(data.email));
    dispatch(setUserPassword(data.password));
  
    const resultAction = await dispatch(signInUser(data));
  
    if (signInUser.fulfilled.match(resultAction)) {
      dispatch(fetchUserData());
    }
  };  

  return (
    <Card className="w-full max-w-md gap-3 rounded-4xl">
      <CardHeader>
        <Logo />
        <CardTitle className="text-center text-3xl">Đăng nhập</CardTitle>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form
            onSubmit={form.handleSubmit(onSubmit)}
            className="flex-col items-center justify-center space-y-4"
          >
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormControl>
                    <InputWithIcon
                      {...field}
                      className="rounded-full"
                      type="text"
                      placeholder="Tên đăng nhập"
                      icon={<FiUser size={20} />}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem className="m-0">
                  <FormControl>
                    <InputWithIcon
                      {...field}
                      className="rounded-full"
                      type="password"
                      placeholder="Mật khẩu"
                      icon={<IoLockClosedOutline size={20} />}
                    />
                  </FormControl>
                  <FormMessage />
                  {error && (
                    <p className={cn("text-destructive text-center text-sm")}>
                      {error}
                    </p>
                  )}
                </FormItem>
              )}
            />
            <div className="m-0 flex w-full justify-end pr-4">
              <Button
                variant="link"
                onClick={() => dispatch(setStep("forgotPassword"))}
                className="m-0 cursor-pointer p-0"
              >
                Quên mật khẩu?
              </Button>
            </div>
            <div className="flex w-full justify-center">
              <Button
                type="submit"
                className="w-60 cursor-pointer rounded-full"
                disabled={loading}
              >
                {loading ? (
                  <Loader2 className="animate-spin" size={20} />
                ) : (
                  "Đăng nhập"
                )}
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>
      <CardFooter className="flex-col">
        <p className="text-muted-foreground text-sm">
          Bạn chưa có tài khoản?{" "}
          <Button
            variant="link"
            onClick={() => dispatch(setStep("signUp"))}
            className="cursor-pointer p-0"
          >
            Đăng ký ngay
          </Button>
        </p>

        <div className="relative flex w-full items-center">
          <div className="flex-grow border-t border-gray-300"></div>
          <span className="mx-4 text-gray-500">Or</span>
          <div className="flex-grow border-t border-gray-300"></div>
        </div>
        <button
          type="button"
          className="mt-2 flex w-30 max-w-xs cursor-pointer items-center justify-center space-x-2 rounded-full border p-2 shadow-sm hover:bg-gray-50"
        >
          <FcGoogle className="h-5 w-5" />
        </button>
      </CardFooter>
    </Card>
  );
}

================
File: src/components/auth/SignUp.tsx
================
"use client";
import { cn } from "@/lib/utils";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";

import { FcGoogle } from "react-icons/fc";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormMessage,
} from "@/components/ui/form";
import { InputWithIcon } from "../ui/InputWithIcon";
import { FiUser } from "react-icons/fi";
import { MdOutlineEmail } from "react-icons/md";
import { IoLockClosedOutline } from "react-icons/io5";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  setUserEmail,
  setUserUsername,
  setUserPassword,
  setStep,
} from "@/redux/auth/authSlice";
import Logo from "../ui/Logo";
// import { signUpUser } from "@/redux/auth/authSlice";
import { RootState } from "@/redux/store";
import { useSelector } from "react-redux";
import { useAppDispatch } from "@/redux/store";
import { signUpUser } from "@/redux/auth/authSlice";
import { Loader2 } from "lucide-react"

const signUpSchema = z.object({
  username: z
    .string()
    .min(3, { message: "Tên đăng nhập phải có ít nhất 3 ký tự" }),
  email: z.string().email({ message: "Email không hợp lệ" }),
  password: z.string().min(6, { message: "Mật khẩu phải có ít nhất 6 ký tự" }),
});

export default function SignUp() {
  const dispatch = useAppDispatch();
  const { loading, error } = useSelector((state: RootState) => state.auth.user);
  const form = useForm({
    resolver: zodResolver(signUpSchema),
    defaultValues: {
      username: "",
      email: "",
      password: "",
    },
  });

  const onSubmit = (data: {
    username: string;
    email: string;
    password: string;
  }) => {
    dispatch(setUserUsername(data.username));
    dispatch(setUserEmail(data.email));
    dispatch(setUserPassword(data.password));
    console.log(data)
    dispatch(signUpUser(data));
  };

  return (
    <Card className="w-full max-w-md gap-3 rounded-4xl">
      <CardHeader>
        <Logo />
        <CardTitle className="text-center text-3xl">Đăng ký</CardTitle>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form
            onSubmit={form.handleSubmit(onSubmit)}
            className="flex-col items-center justify-center space-y-4"
          >
            <FormField
              control={form.control}
              name="username"
              render={({ field }) => (
                <FormItem>
                  <FormControl>
                    <InputWithIcon
                      className="rounded-full"
                      type="text"
                      placeholder="Tên đăng nhập"
                      icon={<FiUser size={20} />}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormControl>
                    <InputWithIcon
                      className="rounded-full"
                      type="email"
                      placeholder="Email"
                      icon={<MdOutlineEmail size={20} />}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormControl>
                    <InputWithIcon
                      className="rounded-full"
                      type="password"
                      placeholder="Mật khẩu"
                      icon={<IoLockClosedOutline size={20} />}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                  {error && <p className={cn("text-destructive text-sm text-center")}>{error}</p>}
                </FormItem>
              )}
            />
            <div className="flex w-full justify-center">
              <Button
                type="submit"
                className="flex w-full items-center justify-center gap-2 rounded-full"
                disabled={loading}
              >
                {loading ? (
                  <>
                    <Loader2 className="animate-spin" size={20} />
                    Đang đăng ký...
                  </>
                ) : (
                  "Đăng ký"
                )}
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>
      <CardFooter className="flex-col">
        <p className="text-muted-foreground text-sm">
          Đã có tài khoản?{" "}
          <Button
            variant="link"
            onClick={() => dispatch(setStep("signIn"))}
            className="cursor-pointer p-0"
          >
            Đăng nhập
          </Button>
        </p>

        <div className="relative flex w-full items-center">
          <div className="flex-grow border-t border-gray-300"></div>
          <span className="mx-4 text-gray-500">Or</span>
          <div className="flex-grow border-t border-gray-300"></div>
        </div>
        <button
          type="button"
          className="mt-2 flex w-30 max-w-xs cursor-pointer items-center justify-center space-x-2 rounded-full border p-2 shadow-sm hover:bg-gray-50"
        >
          <FcGoogle className="h-5 w-5" />
        </button>
      </CardFooter>
    </Card>
  );
}

================
File: src/components/auth/UserInfo.tsx
================
import { useForm } from "react-hook-form";
import { cn } from "@/lib/utils";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowLeft } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormField,
  FormItem,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { InputWithIcon } from "@/components/ui/InputWithIcon";
import { FaUser } from "react-icons/fa";
import { useState } from "react";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "../ui/select";
import { DatePicker } from "../ui/date-picker";
import Logo from "../ui/Logo";
import { useAppDispatch } from "@/redux/store";
import { updateUserInfo } from "@/redux/user/user.slice";

type UserInfoType = {
  name: string;
  gender: string;
  birth: string;
};

export default function UserInfo() {
  const [step, setStep] = useState(1);
  const form = useForm<UserInfoType>({
    defaultValues: {
      name: "",
      gender: "",
      birth: "",
    },
  });

  const dispatch = useAppDispatch();

  const onSubmit = (data: UserInfoType) => {
    const accessToken = localStorage.getItem("accessToken");
console.log("Access Token:", accessToken);
    const payload: { name: string; gender: "MALE" | "FEMALE"; birth: string } = {
      name: data.name,
      gender: data.gender === "Nam" ? "MALE" : "FEMALE",
      birth: data.birth,
    };
    dispatch(updateUserInfo(payload));
  };  

  const nextStep = () => setStep((s) => s + 1);
  const prevStep = () => setStep((s) => s - 1);

  return (
    
    <Card className="w-full max-w-md">
      <CardHeader className="">
        <div className="flex flex-col items-center gap-2">
          <Logo />
          <CardTitle className="text-2xl">Thông tin người dùng</CardTitle>
          <div className="flex items-center justify-center gap-4">
            {[1, 2, 3].map((s, i) => {
              const isActive = step === s;
              return (
                <div key={s} className="flex items-center gap-2">
                  <div
                    className={cn(
                      "flex h-6 w-6 items-center justify-center rounded-full text-xs font-semibold",
                      isActive
                        ? "bg-[#FDBBC1] text-white"
                        : "bg-gray-200 text-gray-400",
                    )}
                  >
                    {s}
                  </div>
                  <span
                    className={cn(
                      "text-xs",
                      isActive ? "font-medium text-[#FDBBC1]" : "text-gray-400",
                    )}
                  >
                    {s === 1
                      ? "Họ và tên"
                      : s === 2
                        ? "Giới tính"
                        : "Ngày sinh"}
                  </span>
                  {i < 2 && <div className="h-px w-10 bg-gray-300" />}
                </div>
              );
            })}
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            {step === 1 && (
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormControl>
                      <InputWithIcon
                        placeholder="Họ và tên"
                        icon={<FaUser />}
                        className="rounded-full"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            )}
            {step === 2 && (
              <FormField
                control={form.control}
                name="gender"
                render={({ field }) => (
                  <FormItem>
                    <FormControl>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <SelectTrigger className="hover:border-ring hover:ring-ring w-full cursor-pointer rounded-full hover:ring-2">
                          <SelectValue placeholder="Giới tính" />
                        </SelectTrigger>
                        <SelectContent className="">
                          <SelectItem value="Nam" className="cursor-pointer">
                            Nam
                          </SelectItem>
                          <SelectItem value="Nữ" className="cursor-pointer">
                            Nữ
                          </SelectItem>
                        </SelectContent>
                      </Select>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            )}
            {step === 3 && (
              <FormField
                control={form.control}
                name="birth"
                render={({ field }) => (
                  <FormItem>
                    <FormControl>
                      <DatePicker
                        date={field.value ? new Date(field.value) : undefined}
                        setDate={(date) =>
                          field.onChange(date?.toISOString() ?? "")
                        }
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            )}
            <div
              className={`flex py-2 ${step === 1 ? "justify-center" : "justify-between"}`}
            >
              {step > 1 && (
                <Button
                  type="button"
                  variant="outline"
                  onClick={prevStep}
                  className="border-input rounded-full border px-6"
                >
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Quay lại
                </Button>
              )}

              {step < 3 ? (
                <Button
                  type="button"
                  onClick={nextStep}
                  className="rounded-full bg-black px-6 text-white hover:bg-black/90"
                >
                  Tiếp tục
                </Button>
              ) : (
                <Button
                  type="submit"
                  className="rounded-full bg-black px-6 text-white hover:bg-black/90"
                >
                  Hoàn tất
                </Button>
              )}
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}

================
File: src/components/auth/VerifyEmail.tsx
================
"use client";
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSlot,
} from "@/components/ui/input-otp";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormMessage,
} from "@/components/ui/form";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { setStep } from "@/redux/auth/authSlice";
import Logo from "../ui/Logo";
import { verifyAccount, verifyOtpForgotPassword } from "@/redux/auth/authSlice";
import { resendEmailVerification } from "@/redux/auth/authSlice";
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store";
import { useAppDispatch } from "@/redux/store";

const otpSchema = z.object({
  otp: z
    .string()
    .min(6, { message: "Mã OTP phải có 6 chữ số" })
    .max(6, { message: "Mã OTP phải có 6 chữ số" }),
});

export default function VerifyEmail() {
  const dispatch = useAppDispatch();
  const step = useSelector((state: RootState) => state.auth.step);
  const form = useForm({
    resolver: zodResolver(otpSchema),
    defaultValues: {
      otp: "",
    },
  });

  const email = useSelector((state: RootState) => state.auth.user.email);

  const onSubmit = (data: { otp: string }) => {
    if (step === "verifyAccount") {
      dispatch(verifyAccount(String(data.otp)));
    } else if (step === "verifyResetPassword") {
      dispatch(verifyOtpForgotPassword(String(data.otp)));
    }
  };  

  const handleResendEmail = () => {
    if (email) {
      dispatch(resendEmailVerification(email));
    }
  };

  return (
    <Card className="w-full max-w-md gap-3 rounded-4xl">
      <CardHeader>
        <Logo />
        <CardTitle className="text-center text-3xl">Xác thực Email</CardTitle>
      </CardHeader>
      <CardContent>
        <p className="text-muted-foreground mb-4 text-center text-sm">
          Nhập mã OTP được gửi đến email của bạn để xác thực tài khoản.
        </p>
        <Form {...form}>
          <form
            onSubmit={form.handleSubmit(onSubmit)}
            className="flex-col items-center justify-center space-y-4"
          >
            <FormField
              control={form.control}
              name="otp"
              render={({ field }) => (
                <FormItem>
                  <FormControl className="flex w-full items-center justify-center">
                    <div className="flex items-center justify-center">
                      <InputOTP
                        maxLength={6}
                        {...field}
                        className="text-center text-lg tracking-widest"
                      >
                        <InputOTPGroup className="flex w-full items-center justify-center">
                          <InputOTPSlot index={0} />
                          <InputOTPSlot index={1} />
                          <InputOTPSlot index={2} />
                          <InputOTPSlot index={3} />
                          <InputOTPSlot index={4} />
                          <InputOTPSlot index={5} />
                        </InputOTPGroup>
                      </InputOTP>
                    </div>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="flex w-full justify-center">
              <Button
                type="submit"
                className="w-60 cursor-pointer rounded-full"
              >
                Xác thực
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>
      <CardFooter className="flex-col">
        <p className="text-muted-foreground text-sm">
          Không nhận được mã?{" "}
          <Button
            variant="link"
            onClick={handleResendEmail}
            className="cursor-pointer p-0"
          >
            Gửi lại email xác thực
          </Button>
        </p>

        <Button
          variant="link"
          onClick={() => dispatch(setStep("signIn"))}
          className="cursor-pointer"
        >
          Quay lại đăng nhập
        </Button>
      </CardFooter>
    </Card>
  );
}

================
File: src/components/calendar/DayView.tsx
================
import { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { ScrollArea } from "../ui/scroll-area";
import dayjs from "dayjs";
import { get24Hours } from "@/utils/date";
import { RootState } from "@/redux/store";

export default function DayView() {
  const [currentTime, setCurrentTime] = useState(dayjs());

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(dayjs());
    }, 60000); // Cập nhật mỗi phút

    return () => clearInterval(interval);
  }, []);

  const selectedDate = useSelector(
    (state: RootState) => state.selectedDate.selectedDate,
  );

  const hours = get24Hours();
  const today = dayjs();
  const isToday = today.isSame(currentTime, "day");
  const isSelected = selectedDate
    ? dayjs(selectedDate).isSame(today, "day")
    : false;

  return (
    <div className="flex flex-1 flex-col">
      <div className="grid h-[10%] flex-grow grid-cols-[auto_auto_1fr]">
        <div className="col-auto flex w-16 items-center justify-center border-r text-xs">
          GMT+07
        </div>
        <div className="col-auto flex w-16 flex-col items-center">
          <div className="text-sm font-medium text-gray-600">
            {dayjs(selectedDate)
              .format("dddd")
              .replace("thứ hai", "TH 2")
              .replace("thứ ba", "TH 3")
              .replace("thứ tư", "TH 4")
              .replace("thứ năm", "TH 5")
              .replace("thứ sáu", "TH 6")
              .replace("thứ bảy", "TH 7")
              .replace("chủ nhật", "CN")}
          </div>
          <div
            className={`flex h-10 w-10 items-center justify-center text-center text-sm font-medium tracking-wide ${
              isSelected
                ? "rounded-full bg-blue-500 font-bold text-white"
                : "text-gray-700"
            }`}
          >
            {dayjs(selectedDate).format("DD")}
          </div>
        </div>
      </div>

      <ScrollArea className="col-span-1 grid h-[90%]">
        <div className="grid grid-cols-[auto_1fr]">
          <div className="col-span-1 flex w-16 flex-col">
            {hours.map((hour, index) => (
              <div
                key={index}
                className="h-16 border-r bg-white text-center text-sm"
              >
                {hour.format("HH:mm")}
              </div>
            ))}
          </div>

          <div className="relative col-span-1 flex flex-col bg-white">
            {(isToday && dayjs(selectedDate).isSame(currentTime, "day")) && (
              <div
                className="absolute right-0 left-0 h-0.5 bg-red-500"
                style={{
                  top: `${((currentTime.hour() * 60 + currentTime.minute()) / (24 * 60)) * 100}%`,
                }}
              />
            )}

            {hours.map((_, idx) => (
              <div
                key={idx}
                
                className="flex h-16 cursor-pointer flex-col border border-gray-300 text-center text-sm hover:bg-gray-200"
              ></div>
            ))}
          </div>
        </div>
      </ScrollArea>
    </div>
  );
}

================
File: src/components/calendar/MonthBox.tsx
================
import React from "react";
import dayjs from "dayjs";
import "dayjs/locale/vi";
import { useAppDispatch } from "@/redux/store";
import { open } from "@/redux/calendar/popupCalen.slice";

dayjs.locale("vi");

export default function MonthBox({
  date,
  rowIndex,
}: {
  date: dayjs.Dayjs;
  rowIndex: number;
}): React.JSX.Element {
  const dispatch = useAppDispatch();
  const isToday = date.isSame(dayjs(), "day");

  const handleClick = () => {
    dispatch(open(date.toISOString()));
  };
  
  return (
    <div
      className="flex flex-col items-center border px-2 hover:bg-gray-200 cursor-pointer"
      onClick={handleClick}
    >
      {rowIndex === 0 && (
        <h3 className="text-sm text-gray-500">
          {date.format("dd").toUpperCase()}
        </h3>
      )}
      <div
        className={`flex items-center justify-center text-center ${
          isToday ? "rounded-full bg-blue-500 text-white" : ""
        } ${date.date() === 1 ? "w-full rounded-none p-1" : "h-8 w-8 rounded-full"}`}
      >
        {date.date() === 1 ? date.format("D [thg] M") : date.date()}
      </div>
    </div>
  );
}

================
File: src/components/calendar/MonthView.tsx
================
import { getMonth } from "@/utils/date";
import MonthBox from "./MonthBox";
import { RootState } from "@/redux/store";
import { useState, useEffect } from "react";
import { useSelector } from "react-redux";

export default function MonthView() {
  const selectedDate = useSelector((state: RootState) => state.selectedDate.selectedDate);
  const [month, setMonth] = useState(getMonth(selectedDate.getMonth()));

  useEffect(() => {
    setMonth(getMonth(selectedDate.getMonth()));
  }, [selectedDate]);

  return (
    <div className="grid h-full flex-grow grid-cols-7 grid-rows-6 cursor-pointer">
      {month.map((week, rowIndex) =>
        week.map((day, colIndex) => (
          <MonthBox
            key={`${rowIndex}-${colIndex}`}
            date={day}
            rowIndex={rowIndex}
          />
        )),
      )}
    </div>
  );
}

================
File: src/components/calendar/WeekView.tsx
================
import { getWeekDays } from "@/utils/date";
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store";
import { ScrollArea } from "../ui/scroll-area";
import { get24Hours } from "@/utils/date";
import { useState, useEffect } from "react";
import dayjs from "dayjs";
import "dayjs/locale/vi";
dayjs.locale("vi");

export default function WeekView() {
  const selectedDate = useSelector(
    (state: RootState) => state.selectedDate.selectedDate,
  );
  const weekDays = getWeekDays(selectedDate);

  const [currentTime, setCurrentTime] = useState(dayjs());
  const hours = get24Hours();
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(dayjs());
    }, 60000); // Cập nhật mỗi phút

    return () => clearInterval(interval);
  }, []);

  return (
    <div className="h-full flex-1">
      <div className="grid h-[10%] flex-grow grid-cols-[auto_1fr_1fr_1fr_1fr_1fr_1fr_1fr] gap-2">
        <div className="col-auto flex w-16 items-center justify-center border-r text-center text-xs">
          GMT+07
        </div>
        {weekDays.map(({ date, isToday, isSelected }, index) => (
          <div
            key={index}
            className="col-span-1 flex flex-col border-r border-gray-300 bg-white p-2 text-center text-sm"
          >
            {date
              .format("dddd")
              .replace("thứ hai", "TH 2")
              .replace("thứ ba", "TH 3")
              .replace("thứ tư", "TH 4")
              .replace("thứ năm", "TH 5")
              .replace("thứ sáu", "TH 6")
              .replace("thứ bảy", "TH 7")
              .replace("chủ nhật", "CN")}

            <div className="flex h-10 w-full items-center justify-center">
              <div
                className={`flex h-10 w-10 items-center justify-center text-center text-sm font-medium tracking-wide ${
                  isToday
                    ? "rounded-full bg-blue-500 font-bold text-white"
                    : "text-gray-700"
                } ${isSelected ? "border-2" : ""}`}
              >
                {date.format("DD")}
              </div>
            </div>
          </div>
        ))}
      </div>

      <ScrollArea className="h-[90%]">
        <div className="grid flex-grow grid-cols-[auto_1fr_1fr_1fr_1fr_1fr_1fr_1fr]">
          <div className="col-span-1 flex w-16 flex-col">
            {hours.map((hour, index) => (
              <div
                key={index}
                className="border-r bg-white text-center text-sm h-16"
              >
                {hour.format("HH:mm")}
              </div>
            ))}
          </div>

          {weekDays.map(({isToday}, index) => (
            <div
              key={index}
              className="relative col-span-1 flex flex-col bg-white"
            >
              {isToday && (
              <div
              className="absolute left-0 right-0 h-0.5 bg-red-500"
              style={{
                top: `${((currentTime.hour() * 60 + currentTime.minute()) / (24 * 60)) * 100}%`,
              }}        
            />            
            )}

              {get24Hours().map((_, idx) => (
                <div
                  key={idx}
                  className="flex flex-col border border-gray-300 text-center text-sm cursor-pointer h-16 hover:bg-gray-200"
                >
                  
                </div>
              ))}
            </div>

          ))}
        </div>
      </ScrollArea>
    </div>
  );
}

================
File: src/components/header/CalendarHeader.tsx
================
import { Box, IconButton, Typography, Menu, MenuItem } from "@mui/material";
import { ChevronLeft, ChevronRight } from "@mui/icons-material";
import { useState } from "react";

const CalendarHeader = () => {
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);

  const handleMenuClick = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  return (
    <Box display="flex" alignItems="center" px={2}>
      <Box
        sx={{
          px: 1.5,
          py: 0.5,
          borderRadius: "20px",
          border: "1px solid #888",
          mr: 2,
          cursor: "pointer",
        }}
      >
        Hôm nay
      </Box>
      <IconButton>
        <ChevronLeft />
      </IconButton>
      <IconButton>
        <ChevronRight />
      </IconButton>
      <Typography variant="h6" sx={{ mx: 2 }}>
        Tháng 5, 2025
      </Typography>
      <Box sx={{ flexGrow: 1 }} />
      <Box>
        <Box
          sx={{
            border: "1px solid #888",
            borderRadius: "20px",
            px: 1.5,
            py: 0.5,
            cursor: "pointer",
          }}
          onClick={handleMenuClick}
        >
          Tháng
        </Box>
        <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleMenuClose}>
          <MenuItem onClick={handleMenuClose}>Ngày</MenuItem>
          <MenuItem onClick={handleMenuClose}>Tuần</MenuItem>
          <MenuItem onClick={handleMenuClose}>Tháng</MenuItem>
        </Menu>
      </Box>
    </Box>
  );
};

export default CalendarHeader;

================
File: src/components/header/CenterHeader.tsx
================
import { Button } from "../ui/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@radix-ui/react-popover";
import { MdKeyboardArrowRight, MdKeyboardArrowLeft } from "react-icons/md";
import { FaCaretDown } from "react-icons/fa";
import { Calendar } from "../ui/calendar";
import { vi } from "date-fns/locale";
import { useDispatch, useSelector } from "react-redux";
import {
  setSelectedDate,
  resetToCurrentDate,
  nextDate,
  prevDate,
  prevMonth,
  nextMonth,
} from "../../redux/calendar/selectedDate.slide";
import { RootState } from "../../redux/store";
import CreateTask from "../sidebar/CreateTask";
import { motion } from "framer-motion";

const weekdayLabels = ["CN", "T2", "T3", "T4", "T5", "T6", "T7"];

export default function CenterHeader() {
  const dispatch = useDispatch();
  const selectedDate =
    useSelector((state: RootState) => state.selectedDate.selectedDate) ||
    new Date();

  const vietnameseDate = useSelector(
    (state: RootState) => state.selectedDate.vietnameseDate,
  );
  const vietnameseMonth = useSelector(
    (state: RootState) => state.selectedDate.vietnameseMonth,
  );
  const selectedViewMode = useSelector(
    (state: RootState) => state.viewMode.selectedViewMode,
  );

  const handlePrev = () => {
    if (selectedViewMode === "month") {
      dispatch(prevMonth());
    } else {
      dispatch(prevDate());
    }
  };

  const handleNext = () => {
    if (selectedViewMode === "month") {
      dispatch(nextMonth());
    } else {
      dispatch(nextDate());
    }
  };

  return (
    <div className="relative flex items-center gap-4 p-4">
      <Button
        variant="outline"
        className="rounded-3xl px-4 py-2 hover:cursor-pointer"
        onClick={() => dispatch(resetToCurrentDate())}
      >
        Hôm nay
      </Button>
      <div className="flex items-center gap-2">
        <Button
          variant="ghost"
          className="rounded-full p-2 hover:cursor-pointer"
          onClick={handlePrev}
        >
          <MdKeyboardArrowLeft />
        </Button>
        <Button
          variant="ghost"
          className="rounded-full p-2 hover:cursor-pointer"
          onClick={handleNext}
        >
          <MdKeyboardArrowRight />
        </Button>
      </div>
      <Popover modal={true}>
        <PopoverTrigger asChild>
          <Button
            variant="ghost"
            className="flex items-center gap-2 rounded-full p-2 hover:cursor-pointer"
          >
            {selectedViewMode === "month" ? vietnameseMonth : vietnameseDate}
            <FaCaretDown />
          </Button>
        </PopoverTrigger>
        <PopoverContent
          className="w-auto rounded-md bg-white p-2 shadow-lg z-[9999]"
          align="center"
          side="bottom"
        >
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            transition={{ duration: 0.2 }}
          >
            <Calendar
              mode="single"
              locale={vi}
              formatters={{
                formatWeekdayName: (weekday) => weekdayLabels[weekday.getDay()],
              }}
              selected={selectedDate}
              onSelect={(date) => {
                if (date instanceof Date) {
                  dispatch(setSelectedDate(date));
                }
              }}
              className="rounded-3xl"
            />
          </motion.div>
        </PopoverContent>
      </Popover>
      <CreateTask />
    </div>
  );
}

================
File: src/components/header/Header.tsx
================
import { AppBar, Toolbar, Box, IconButton, Badge, Avatar } from "@mui/material";
import NotificationsIcon from "@mui/icons-material/Notifications";
import SearchIcon from "@mui/icons-material/Search";
import { styled, alpha } from "@mui/material/styles";
import InputBase from "@mui/material/InputBase";

const drawerWidth = 72;

const Search = styled("div")(({ theme }) => ({
  position: "relative",
  borderRadius: theme.shape.borderRadius,
  backgroundColor: alpha(theme.palette.common.black, 0.05),
  "&:hover": {
    backgroundColor: alpha(theme.palette.common.black, 0.1),
  },
  marginRight: theme.spacing(2),
  marginLeft: 0,
  width: "100%",
  maxWidth: 300,
}));

const SearchIconWrapper = styled("div")({
  padding: "0 12px",
  height: "100%",
  position: "absolute",
  pointerEvents: "none",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
});

const StyledInputBase = styled(InputBase)(({ theme }) => ({
  color: "inherit",
  width: "100%",
  paddingLeft: `calc(1em + ${theme.spacing(4)})`,
}));

const Header = () => (
  <AppBar
    elevation={0}
    sx={{
      width: `calc(100% - ${drawerWidth}px)`,
      bgcolor: "#faf7f7",
      color: "#333",
      py: 1,
    }}
  >
    <Toolbar>
      <Search>
        <SearchIconWrapper>
          <SearchIcon />
        </SearchIconWrapper>
        <StyledInputBase
          placeholder="Search…"
          inputProps={{ "aria-label": "search" }}
        />
      </Search>
      <Box sx={{ flexGrow: 1 }} />
      <IconButton size="large" color="inherit">
        <Badge badgeContent={4} color="error">
          <NotificationsIcon />
        </Badge>
      </IconButton>
      <Avatar sx={{ ml: 2, bgcolor: "#4caf50", width: 40, height: 40 }}>
        U
      </Avatar>
    </Toolbar>
  </AppBar>
);

export default Header;

================
File: src/components/header/LeftHeader.tsx
================
import { Button } from "../ui/button";
import { Menu } from "lucide-react";
import { useSidebar } from "@/components/ui/sidebar";
import Logo from "../ui/Logo";

export default function LeftHeader() {
  const { toggleSidebar } = useSidebar();

  return (
    <div className="flex items-center">
      <div className="flex items-center justify-center gap-3">
        <Button
          variant="ghost"
          className="cursor-pointer rounded-full p-2 hover:cursor-pointer"
          onClick={toggleSidebar} // Use the sidebar toggle function
        >
          <Menu className="size-6" />
        </Button>
        <Logo />
      </div>
    </div>
  );
}

================
File: src/components/header/RightHeader.tsx
================
import { Avatar, AvatarFallback, AvatarImage } from "@radix-ui/react-avatar";
import { IoMdSettings } from "react-icons/io";
import { FaSearch } from "react-icons/fa";
import { Button } from "../ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { FaCaretDown } from "react-icons/fa";
import boCon from "../../assets/image.png";
import { setViewMode } from "@/redux/calendar/ViewMode";
import { useDispatch } from "react-redux";
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store";

export default function RightHeader() {
  const dispatch = useDispatch();
  const selectedViewMode = useSelector((state: RootState) => state.viewMode.selectedViewMode);

  return (
    <div className="flex items-center gap-4">
      <Button
        variant="ghost"
        className="flex items-center gap-2 rounded-full p-2 hover:cursor-pointer"
      >
        <FaSearch />
      </Button>
      <Button variant="ghost" className="rounded-full p-2 hover:cursor-pointer">
        <IoMdSettings />
      </Button>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
        <Button variant="outline" className="flex items-center gap-2 rounded-full">
          {selectedViewMode === "day" ? "Ngày" : selectedViewMode === "week" ? "Tuần" : "Tháng"}
          <FaCaretDown />
        </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end">
          <DropdownMenuItem onClick={() => dispatch(setViewMode("day"))}>
            Ngày
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => dispatch(setViewMode("week"))}>
            Tuần
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => dispatch(setViewMode("month"))}>
            Tháng
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
      <Avatar className="h-10 w-10 rounded-full bg-gray-300 hover:cursor-pointer">
        <AvatarImage src={boCon} className="h-10 w-10 rounded-full" />
        <AvatarFallback>CN</AvatarFallback>
      </Avatar>
    </div>
  );
}

================
File: src/components/MainView.tsx
================
import MonthView from './calendar/MonthView';

export default function MainView() {
  return (
    <div className='flex-1 w-full'>
        <MonthView />
    </div>
  )
}

================
File: src/components/sidebar/CreateTask.tsx
================
import { HiPlus } from "react-icons/hi";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";

export default function CreateTask() {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" className="flex items-center gap-2 rounded-full px-4 py-2">
          <HiPlus />
          Tạo
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem>Công việc mới</DropdownMenuItem>
        <DropdownMenuItem>Dự án mới</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

================
File: src/components/sidebar/SideBar.tsx
================
import { useState } from "react";
import {
  Box,
  Drawer,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  AppBar,
  Toolbar,
  InputBase,
  Badge,
  Avatar,
  styled,
  alpha,
  IconButton,
} from "@mui/material";
import NotificationsIcon from "@mui/icons-material/Notifications";
import SearchIcon from "@mui/icons-material/Search";
import { useAppDispatch } from "@/redux/store";
import { setPage } from "@/redux/page/pageSlice";
import CalendarHeader from "../header/CalendarHeader";

// Logo SVG component
const Logo = () => (
  <svg width="40" height="40" viewBox="0 0 100 100" fill="none">
    <circle cx="50" cy="50" r="45" fill="white" stroke="#333" strokeWidth="2" />
    <circle cx="35" cy="40" r="8" fill="#333" />
    <circle cx="65" cy="40" r="8" fill="#333" />
    <path d="M35 60 Q50 70 65 60" stroke="#333" strokeWidth="3" fill="none" />
    <rect x="30" y="55" width="40" height="25" rx="5" fill="#e74c3c" />
    <path d="M30 60 Q50 75 70 60" stroke="white" strokeWidth="2" fill="none" />
  </svg>
);

// Custom styled search bar
const Search = styled("div")(({ theme }) => ({
  position: "relative",
  borderRadius: 24,
  backgroundColor: alpha(theme.palette.common.white, 0.9),
  "&:hover": {
    backgroundColor: alpha(theme.palette.common.white, 1),
  },
  marginLeft: theme.spacing(3),
  width: "100%",
  maxWidth: 600,
  boxShadow: "0 2px 5px rgba(0,0,0,0.05)",
}));
const SearchIconWrapper = styled("div")(({ theme }) => ({
  padding: theme.spacing(0, 2),
  height: "100%",
  position: "absolute",
  pointerEvents: "none",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
}));
const StyledInputBase = styled(InputBase)(({ theme }) => ({
  color: "inherit",
  width: "100%",
  "& .MuiInputBase-input": {
    padding: theme.spacing(1, 1, 1, 0),
    paddingLeft: `calc(1em + ${theme.spacing(4)})`,
    width: "100%",
  },
}));

// Navigation icons
const icons = [
  {
    id: "dashboard",
    icon: () => (
      <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M4 4h7v7H4V4zm9 0h7v7h-7V4zm-9 9h7v7H4v-7zm9 0h7v7h-7v-7z" />
      </svg>
    ),
  },
  {
    id: "calendar",
    icon: () => (
      <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M19 4h-1V2h-2v2H8V2H6v2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11zM5 7V6h14v1H5z" />
      </svg>
    ),
  },
  {
    id: "pomodoro",
    icon: () => (
      <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 13-4-2.5V7h2v4.15l3 1.85-1 1.5z" />
      </svg>
    ),
  },
];

export default function Sidebar() {
  const [selectedIndex, setSelectedIndex] = useState(0);
  const drawerWidth = 72;
  const dispatch = useAppDispatch();

  return (
    <>
      {/* Sidebar Drawer */}
      <Drawer
        variant="permanent"
        sx={{
          width: drawerWidth,
          flexShrink: 0,
          "& .MuiDrawer-paper": {
            width: drawerWidth,
            boxSizing: "border-box",
            bgcolor: "#faf7f7",
            border: "none",
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            py: 2,
          },
        }}
      >
        <Box sx={{ mb: 4 }}>
          <Logo />
        </Box>
        <List sx={{ width: "100%" }}>
          {icons.map((Icon, index) => (
            <ListItem
              key={index}
              disablePadding
              sx={{ display: "block", mb: 2 }}
            >
              <ListItemButton
                selected={selectedIndex === index}
                onClick={() => {
                  setSelectedIndex(index);
                  dispatch(
                    setPage(icons[index].id as "calendar" | "dashboard" | "pomodoro"),
                  );
                }}
                sx={{
                  minHeight: 48,
                  justifyContent: "center",
                  borderRadius: "50%",
                  mx: "auto",
                  width: 48,
                  height: 48,
                  "&.Mui-selected": {
                    bgcolor: "#e3f2fd",
                    color: "#1976d2",
                    boxShadow: "0 4px 8px rgba(25, 118, 210, 0.2)",
                  },
                }}
              >
                <ListItemIcon
                  sx={{
                    minWidth: 0,
                    justifyContent: "center",
                    color: selectedIndex === index ? "#2196f3" : "inherit",
                  }}
                >
                  <Icon.icon />
                </ListItemIcon>
              </ListItemButton>
            </ListItem>
          ))}
        </List>
      </Drawer>
      
    </>
  );
}

================
File: src/components/ui/alert-dialog.tsx
================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: src/components/ui/avatar.tsx
================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }

================
File: src/components/ui/calendar.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: React.ComponentProps<typeof DayPicker>) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row gap-2",
        month: "flex flex-col gap-4",
        caption: "flex justify-center pt-1 relative items-center w-full",
        caption_label: "text-sm font-medium",
        nav: "flex items-center gap-1",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "size-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-x-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "size-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start:
          "day-range-start aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_range_end:
          "day-range-end aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("size-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("size-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}

export { Calendar }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-[data-slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}

================
File: src/components/ui/command.tsx
================
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props}
    />
  )
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  )
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: src/components/ui/date-picker.tsx
================
import { CalendarIcon } from "lucide-react"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { format } from "date-fns"
import { vi } from "date-fns/locale"

export function DatePicker({ date, setDate }: { date: Date | undefined, setDate: (date: Date) => void }) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant={"outline"}
          className="w-full justify-start text-left font-normal rounded-full"
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {date ? format(date, "dd/MM/yyyy", { locale: vi }) : <span>Chọn ngày</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0 z-50 bg-white border">
      <Calendar
          mode="single"
          selected={date}
          onSelect={(d) => d && setDate(d)}
          locale={vi}
          initialFocus
        />
      </PopoverContent>
    </Popover>
  )
}

================
File: src/components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}

================
File: src/components/ui/dropdown-menu.tsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground data-[variant=destructive]:*:[svg]:!text-destructive-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}

================
File: src/components/ui/event-popover.tsx
================
export default function EvenPopover() {
  return (
    <div>EvenPopover</div>
  )
}

================
File: src/components/ui/feature-grid.tsx
================
import type React from "react"
import { Calendar, BarChart3, MessageSquare, Clock, FileText, Target, Grid3X3, Sparkles } from "lucide-react"

const features = [
  { name: "Tasks", icon: Grid3X3 },
  { name: "Chat", icon: MessageSquare },
  { name: "AI", icon: Sparkles },
  { name: "Sprints", icon: Clock },
  { name: "Time Tracking", icon: Clock },
  { name: "Calendar", icon: Calendar },
  { name: "Docs", icon: FileText },
  { name: "Goals", icon: Target },
  { name: "Dashboards", icon: BarChart3 },
]

export default function FeatureGrid() {
  return (
    <div className="grid grid-cols-3 gap-4">
      {features.map((feature) => (
        <FeatureCard key={feature.name} name={feature.name} Icon={feature.icon} />
      ))}
    </div>
  )
}

function FeatureCard({ name, Icon }: { name: string; Icon: React.ElementType }) {
  return (
    <div className="flex flex-col items-center justify-center p-4 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors cursor-pointer">
      <div className="w-12 h-12 rounded-lg bg-white shadow-sm flex items-center justify-center mb-2">
        <Icon className="h-6 w-6 text-gray-400" />
      </div>
      <span className="text-sm text-gray-600 text-center">{name}</span>
    </div>
  )
}

================
File: src/components/ui/form.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm text-center", className)}
      {...props}
    >
      {body}
    </p>
  )
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: src/components/ui/input-otp.tsx
================
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { MinusIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function InputOTP({
  className,
  containerClassName,
  ...props
}: React.ComponentProps<typeof OTPInput> & {
  containerClassName?: string
}) {
  return (
    <OTPInput
      data-slot="input-otp"
      containerClassName={cn(
        "flex items-center gap-2 has-disabled:opacity-50",
        containerClassName
      )}
      className={cn("disabled:cursor-not-allowed", className)}
      {...props}
    />
  )
}

function InputOTPGroup({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="input-otp-group"
      className={cn("flex items-center", className)}
      {...props}
    />
  )
}

function InputOTPSlot({
  index,
  className,
  ...props
}: React.ComponentProps<"div"> & {
  index: number
}) {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}

  return (
    <div
      data-slot="input-otp-slot"
      data-active={isActive}
      className={cn(
        "data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="animate-caret-blink bg-foreground h-4 w-px duration-1000" />
        </div>
      )}
    </div>
  )
}

function InputOTPSeparator({ ...props }: React.ComponentProps<"div">) {
  return (
    <div data-slot="input-otp-separator" role="separator" {...props}>
      <MinusIcon />
    </div>
  )
}

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }

================
File: src/components/ui/InputWithIcon.tsx
================
import * as React from "react";
import { Input } from "@/components/ui/input";

interface InputWithIconProps extends React.InputHTMLAttributes<HTMLInputElement> {
    icon?: React.ReactNode;
  }  

const InputWithIcon = React.forwardRef<HTMLInputElement, InputWithIconProps>(
  ({ className, type, icon, ...props }, ref) => {
    return (
      <div className="relative w-full">
        {icon && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground">
            {icon}
          </div>
        )}
        <Input
          type={type}
          className={`h-10 w-full rounded-md border bg-background px-3 py-2 pl-10 text-sm focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:opacity-50 ${className}`}
          ref={ref}
          {...props}
        />
      </div>
    );
  }
);
InputWithIcon.displayName = "InputWithIcon";

export { InputWithIcon };

================
File: src/components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }

================
File: src/components/ui/Logo.tsx
================
import logo from "../../assets/TaskRacerLogo.png";

export default function Logo({ className = "" }: { className?: string }) {
  return (
    <a href="/" className={`flex items-center justify-center gap-2 ${className}`} onClick={() => window.location.reload()}>
      <img src={logo} alt="TaskRacer Logo" className="h-12 w-12 rounded" />
      <h1 className="text-3xl font-bold text-[#FF3B30]">TaskRacer</h1>
    </a>
  );
}

================
File: src/components/ui/nav-bar.tsx
================
"use client";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { ChevronDown } from "lucide-react";
import Logo from "@/assets/TaskRacerLogo.png";
import { useDispatch } from "react-redux";
import { setStep } from "@/redux/auth/authSlice";
import {
  AlarmClock,
  CalendarCheck,
  FileText,
  Users,
  Trophy,
  BarChart3,
} from "lucide-react";
import {
  Brain,
  Users2,
  Lightbulb,
} from "lucide-react";

const products = [
  {
    title: "Pomodoro & Tập trung",
    icon: <AlarmClock className="mr-2 h-4 w-4" />,
  },
  {
    title: "Lịch học & Deadline",
    icon: <CalendarCheck className="mr-2 h-4 w-4" />,
  },
  {
    title: "Tài liệu học tập",
    icon: <FileText className="mr-2 h-4 w-4" />,
  },
  {
    title: "Học nhóm & Cộng đồng",
    icon: <Users className="mr-2 h-4 w-4" />,
  },
  {
    title: "Game hóa học tập",
    icon: <Trophy className="mr-2 h-4 w-4" />,
  },
  {
    title: "Thống kê & Xếp hạng",
    icon: <BarChart3 className="mr-2 h-4 w-4" />,
  },
];

const solutions = [
  {
    title: "Tối ưu lịch học",
    icon: <Lightbulb className="mr-2 h-4 w-4" />,
  },
  {
    title: "Chế độ tập trung",
    icon: <Brain className="mr-2 h-4 w-4" />,
  },
  {
    title: "Học nhóm hiệu quả",
    icon: <Users2 className="mr-2 h-4 w-4" />,
  },
];

export default function NavBar() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  return (
    <header className="sticky top-0 z-50 h-20 border-b border-gray-100 bg-white/80 backdrop-blur-sm">
      <div className="container mx-auto px-4">
        <div className="flex h-16 items-center justify-between md:h-20">
          <div className="flex items-center">
            <a
              href="/"
              className="flex items-center justify-center gap-2"
              onClick={() => window.location.reload()}
            >
              <img
                src={Logo}
                alt="TaskRacer Logo"
                className="h-12 w-12 rounded"
              />
              <h1 className="text-3xl font-bold text-[#FF3B30]">TaskRacer</h1>
            </a>
            <div className="ml-2 hidden border-l border-gray-200 pl-2 text-xs text-gray-500 md:block">
              Ứng dụng tất cả
              <br />
              cho công việc
            </div>
          </div>

          <nav className="hidden items-center space-x-1 md:flex">
            <NavItem title="Sản phẩm" items={products} />
            <NavItem title="Giải pháp" items={solutions} />
            <Button
              variant="ghost"
              onClick={() => navigate("/premium")}
              className="px-3 py-2 text-gray-700 hover:text-gray-900"
            >
              Bảng giá
            </Button>
          </nav>

          <div className="flex items-center space-x-2">
            <Button
              variant="ghost"
              onClick={() => {
                dispatch(setStep("signIn"));
                navigate("/auth");
              }}
              className="hidden font-medium text-gray-700 hover:text-gray-900 md:inline-flex"
            >
              Đăng nhập
            </Button>
            <Button
              className="rounded-md bg-gradient-to-r from-[#FF3B30] to-[#cc9600] px-6 py-2 font-semibold text-white transition-all hover:brightness-110"
              onClick={() => {
                dispatch(setStep("signUp"));
                navigate("/auth");
              }}
            >
              Đăng ký
            </Button>
          </div>
        </div>
      </div>
    </header>
  );
}

function NavItem({
  title,
  items,
}: {
  title: string;
  items: { title: string; icon: React.ReactNode }[];
}) {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <button className="flex items-center px-3 py-2 text-gray-700 hover:text-gray-900">
          {title} <ChevronDown className="ml-1 h-4 w-4" />
        </button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="start" className="w-64">
        {items.map((item, index) => (
          <DropdownMenuItem key={index} className="flex items-center gap-2">
            {item.icon}
            {item.title}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

================
File: src/components/ui/popover.tsx
================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

================
File: src/components/ui/popup-calendar.tsx
================
import { useRef, useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { FiClock } from "react-icons/fi";
import { IoCloseSharp } from "react-icons/io5";
import { FileText } from "lucide-react";
import { useSelector } from "react-redux";
import {
  setStartTime,
  setEndTime,
  setPriority,
  setStatus,
  setDescription,
  setTitle,
} from "@/redux/calendar/popupCalen.slice";
import { RootState } from "@/redux/store";
import { close, setTime } from "@/redux/calendar/popupCalen.slice";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

import { Input } from "./input";
import TimePicker from "./time-picker";
import { Textarea } from "@/components/ui/textarea";
import { createTask } from "@/redux/calendar/popupCalen.slice";
import { useAppDispatch } from "@/redux/store";

export default function PopUpCalen() {
  const dispatch = useAppDispatch();
  const popoverRef = useRef<HTMLDivElement>(null);
  const {
    isOpen,
    selectedDate,
    isSetTime,
    startTime,
    endTime,
    status,
    priority,
    description,
    title,
  } = useSelector((state: RootState) => state.popupCalen);

  const getPriorityLabel = (priority: "LOW" | "MEDIUM" | "HIGH" | null) => {
    switch (priority) {
      case "LOW":
        return "Thấp";
      case "MEDIUM":
        return "Trung bình";
      case "HIGH":
        return "Cao";
      default:
        return "Độ ưu tiên";
    }
  };

  const getStatusLabel = (
    status: "TODO" | "IN_PROGRESS" | "DONE" | "CANCELED" | null,
  ) => {
    switch (status) {
      case "TODO":
        return "Phải làm";
      case "IN_PROGRESS":
        return "Đang xử lý";
      case "DONE":
        return "Hoàn thành";
      case "CANCELED":
        return "Đã hủy";
      default:
        return "Trạng thái";
    }
  };

  const [editing, setEditing] = useState(false);

  const handleSubmit = () => {
    if (
      !title ||
      !priority ||
      !status ||
      !selectedDate ||
      !startTime ||
      !endTime
    )
      return;
  
    const startAt = `${selectedDate.format("YYYY-MM-DD")}T${startTime}:00.000Z`;
    const dueAt = `${selectedDate.format("YYYY-MM-DD")}T${endTime}:00.000Z`;
  
    console.log("📦 Submit Task Payload:", {
      title,
      priority,
      description: description ?? "",
      startAt,
      dueAt,
      status,
    });
  
    dispatch(
      createTask({
        title,
        priority,
        description: description ?? "",
        startAt,
        dueAt,
        status,
      })
    );
  };
  
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as HTMLElement;

      if (
        popoverRef.current &&
        !popoverRef.current.contains(target) &&
        !target.closest(".popover-content")
      ) {
        dispatch(close());
      }
    };

    if (isOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isOpen, dispatch]);

  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/50"
      onClick={() => dispatch(close())}
    >
      <div
        ref={popoverRef}
        className="w-full max-w-lg rounded-xl bg-white p-4 shadow-xl"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex items-center justify-between">
          <Button variant="ghost" size="icon" onClick={() => dispatch(close())}>
            <IoCloseSharp className="h-5 w-5" />
          </Button>
        </div>

        <div className="w-full">
          <Input
            value={title ?? ""}
            onChange={(e) => dispatch(setTitle(e.target.value))}
            placeholder="Thêm tiêu đề và thời gian"
            className="rounded-none border-0 border-b border-blue-400 text-base font-medium shadow-none focus-visible:border-b-2 focus-visible:border-blue-500 focus-visible:ring-0"
          />
        </div>

        <div className="space-y-3 text-sm">
          <div className="flex items-center gap-3">
            <FiClock className="text-gray-600" />
            <div className="flex w-full items-center justify-between">
              <span className="text-sm text-black capitalize">
                {selectedDate
                  ? !isSetTime
                    ? `${selectedDate.format("dddd, D [tháng] M")} ⋅ ${startTime} – ${endTime}`
                    : selectedDate.format("dddd, D [tháng] M")
                  : "Chưa chọn ngày"}
              </span>
              <div className="flex items-center gap-x-2">
                {isSetTime ? (
                  <div className="flex items-center gap-x-2">
                    <TimePicker
                      value={startTime ?? ""}
                      onChange={(val) => dispatch(setStartTime(val))}
                    />
                    <span>-</span>
                    <TimePicker
                      value={endTime ?? ""}
                      onChange={(val) => dispatch(setEndTime(val))}
                    />
                  </div>
                ) : (
                  <Button
                    variant="outline"
                    className="h-7 px-3 text-xs"
                    onClick={() => dispatch(setTime(true))}
                  >
                    Thêm thời gian
                  </Button>
                )}
              </div>
            </div>
          </div>

          <div className="w-full">
            {editing ? (
              <Textarea
                autoFocus
                value={description ?? ""}
                onChange={(e) => dispatch(setDescription(e.target.value))}
                placeholder="Nhập mô tả..."
                className="min-h-[80px] w-full rounded-xl"
                onBlur={() => {
                  if ((description ?? "").trim() === "") setEditing(false);
                }}
              />
            ) : (
              <Button
                variant="ghost"
                className="text-muted-foreground w-full justify-start rounded-xl bg-gray-100 hover:bg-gray-200"
                onClick={() => setEditing(true)}
              >
                <FileText className="mr-2 h-4 w-4" />
                Thêm mô tả
              </Button>
            )}
          </div>

          <div className="flex justify-center gap-4">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="w-32">
                  {getPriorityLabel(priority)}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="popover-content w-40">
                <DropdownMenuItem onSelect={() => dispatch(setPriority("LOW"))}>
                  Thấp
                </DropdownMenuItem>
                <DropdownMenuItem
                  onSelect={() => dispatch(setPriority("MEDIUM"))}
                >
                  Trung bình
                </DropdownMenuItem>
                <DropdownMenuItem
                  onSelect={() => dispatch(setPriority("HIGH"))}
                >
                  Cao
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="w-32">
                  {getStatusLabel(status)}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="popover-content w-40">
                <DropdownMenuItem onSelect={() => dispatch(setStatus("TODO"))}>
                  Mở
                </DropdownMenuItem>
                <DropdownMenuItem
                  onSelect={() => dispatch(setStatus("IN_PROGRESS"))}
                >
                  Đang xử lý
                </DropdownMenuItem>
                <DropdownMenuItem onSelect={() => dispatch(setStatus("DONE"))}>
                  Hoàn thành
                </DropdownMenuItem>
                <DropdownMenuItem
                  onSelect={() => dispatch(setStatus("CANCELED"))}
                >
                  Đã hủy
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>

          <div className="mt-4 flex justify-end">
            <Button onClick={handleSubmit} className="rounded-full px-6">
              Lưu
            </Button>
          </div>

        </div>
      </div>
    </div>
  );
}

================
File: src/components/ui/premium-list.tsx
================
import { Check, X } from "lucide-react";

interface PremiumListProps {
  title: string;
  features: { text: string; available: boolean }[];
}

export default function PremiumList({ title, features }: PremiumListProps) {
  return (
    <div
      className="w-80 rounded-2xl p-6 text-white text-center h-160"
      style={{
        background: "linear-gradient(163.3deg, #FF3B30 11.78%, #cc9600 158.85%)",
      }}
    >
      <h2 className="text-lg font-bold mb-4">{title}</h2>
      <div className="space-y-3">
        {features.map((feature, index) => (
          <div key={index} className="flex items-center justify-between p-3  rounded-md">
            <span className="text-sm">{feature.text}</span>
            {feature.available ? (
              <Check className="text-white" size={20} />
            ) : (
              <X className="text-white" size={20} />
            )}
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: src/components/ui/scroll-area.tsx
================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="ring-ring/10 dark:ring-ring/20 dark:outline-ring/40 outline-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] focus-visible:ring-4 focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }

================
File: src/components/ui/select.tsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}

================
File: src/components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }

================
File: src/components/ui/setting-pomodoro.tsx
================
import * as React from "react";
import { useSelector } from "react-redux";
import { X } from "lucide-react";
import { Dialog, DialogContent } from "@mui/material";
import { Input } from "@/components/ui/input";
import { RootState } from "@/redux/store";
import { useAppDispatch } from "@/redux/store";
import {
  changePomodoro,
  changeShortBreak,
  changeLongBreak,
  changeLongBreakInterval,
  toggleAutoStartBreaks,
  toggleAutoStartPomodoros,
} from "@/redux/pomodoro/pomodoro.slice";

interface SettingsDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function SettingsDialog({ open, onOpenChange }: SettingsDialogProps) {
  const dispatch = useAppDispatch();
  const settings = useSelector((state: RootState) => state.pomodoro.settings);

  return (
    <Dialog open={open} onClose={() => onOpenChange(false)}>
      <DialogContent className="max-w-md p-0">
        <div className="border-b p-4">
          <div className="flex items-center justify-between">
            <h2 className="font-['Baloo_2',sans-serif] text-xl text-[#4B4E6D]">
              SETTING
            </h2>
            <button
              onClick={() => onOpenChange(false)}
              className="rounded-full p-1 hover:bg-gray-100"
            >
              <X className="h-5 w-5 text-gray-500" />
            </button>
          </div>
        </div>

        <div className="space-y-6 p-4">
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <div className="text-[#4B4E6D]">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <circle cx="12" cy="12" r="10" />
                  <polyline points="12 6 12 12 16 14" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-[#4B4E6D]">TIMER</h3>
            </div>

            <div className="space-y-4">
              <div>
                <p className="mb-2 text-sm text-gray-500">Time (minutes)</p>
                <div className="grid grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <label className="text-sm text-gray-500">Pomodoro</label>
                    <Input
                      type="number"
                      value={settings.pomodoro}
                      onChange={(e) =>
                        dispatch(changePomodoro(e.target.value))
                      }
                      className="bg-gray-100"
                    />
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm text-gray-500">Short Break</label>
                    <Input
                      type="number"
                      value={settings.shortBreak}
                      onChange={(e) =>
                        dispatch(changeShortBreak(e.target.value))
                      }
                      className="bg-gray-100"
                    />
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm text-gray-500">Long Break</label>
                    <Input
                      type="number"
                      value={settings.longBreak}
                      onChange={(e) =>
                        dispatch(changeLongBreak(e.target.value))
                      }
                      className="bg-gray-100"
                    />
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <label className="text-[#4B4E6D]">Auto Start Breaks</label>
                  <div
                    className="relative inline-flex h-6 w-11 cursor-pointer items-center rounded-full transition-colors"
                    onClick={() => dispatch(toggleAutoStartBreaks())}
                  >
                    <div
                      className={`${
                        settings.autoStartBreaks ? "bg-[#4B4E6D]" : "bg-gray-300"
                      } h-6 w-11 rounded-full transition-colors`}
                    />
                    <div
                      className={`${
                        settings.autoStartBreaks ? "translate-x-6" : "translate-x-1"
                      } absolute h-4 w-4 rounded-full bg-white transition-transform`}
                    />
                  </div>
                </div>

                <div className="flex items-center justify-between">
                  <label className="text-[#4B4E6D]">Auto Start Pomodoros</label>
                  <div
                    className="relative inline-flex h-6 w-11 cursor-pointer items-center rounded-full transition-colors"
                    onClick={() => dispatch(toggleAutoStartPomodoros())}
                  >
                    <div
                      className={`${
                        settings.autoStartPomodoros ? "bg-[#4B4E6D]" : "bg-gray-300"
                      } h-6 w-11 rounded-full transition-colors`}
                    />
                    <div
                      className={`${
                        settings.autoStartPomodoros
                          ? "translate-x-6"
                          : "translate-x-1"
                      } absolute h-4 w-4 rounded-full bg-white transition-transform`}
                    />
                  </div>
                </div>

                <div className="flex items-center justify-between">
                  <label className="text-[#4B4E6D]">Long Break interval</label>
                  <Input
                    type="number"
                    value={settings.longBreakInterval}
                    onChange={(e) =>
                      dispatch(changeLongBreakInterval(e.target.value))
                    }
                    className="w-20 bg-gray-100"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}

================
File: src/components/ui/sheet.tsx
================
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: src/components/ui/sidebar.tsx
================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { VariantProps, cva } from "class-variance-authority";
import { PanelLeftIcon } from "lucide-react";

import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

const SIDEBAR_COOKIE_NAME = "sidebar_state";
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = "16rem";
const SIDEBAR_WIDTH_MOBILE = "18rem";
const SIDEBAR_WIDTH_ICON = "3rem";
const SIDEBAR_KEYBOARD_SHORTCUT = "b";

type SidebarContext = {
  state: "expanded" | "collapsed";
  open: boolean;
  setOpen: (open: boolean) => void;
  openMobile: boolean;
  setOpenMobile: (open: boolean) => void;
  isMobile: boolean;
  toggleSidebar: () => void;
};

const SidebarContext = React.createContext<SidebarContext | null>(null);

function useSidebar() {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.");
  }

  return context;
}

function SidebarProvider({
  defaultOpen = true,
  open: openProp,
  onOpenChange: setOpenProp,
  className,
  style,
  children,
  ...props
}: React.ComponentProps<"div"> & {
  defaultOpen?: boolean;
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
}) {
  const isMobile = useIsMobile();
  const [openMobile, setOpenMobile] = React.useState(false);

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen);
  const open = openProp ?? _open;
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === "function" ? value(open) : value;
      if (setOpenProp) {
        setOpenProp(openState);
      } else {
        _setOpen(openState);
      }

      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
    },
    [setOpenProp, open],
  );

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);
  }, [isMobile, setOpen, setOpenMobile]);

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (
        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
        (event.metaKey || event.ctrlKey)
      ) {
        event.preventDefault();
        toggleSidebar();
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [toggleSidebar]);

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? "expanded" : "collapsed";

  const contextValue = React.useMemo<SidebarContext>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],
  );

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          data-slot="sidebar-wrapper"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn(
            "group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full",
            className,
          )}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  );
}

function Sidebar({
  side = "left",
  variant = "sidebar",
  collapsible = "offcanvas",
  className,
  children,
  ...props
}: React.ComponentProps<"div"> & {
  side?: "left" | "right";
  variant?: "sidebar" | "floating" | "inset";
  collapsible?: "offcanvas" | "icon" | "none";
}) {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

  if (collapsible === "none") {
    return (
      <div
        data-slot="sidebar"
        className={cn(
          "bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col",
          className,
        )}
        {...props}
      >
        {children}
      </div>
    );
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-slot="sidebar"
          data-mobile="true"
          className="bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <div
      className="group peer text-sidebar-foreground hidden md:block"
      data-state={state}
      data-collapsible={state === "collapsed" ? collapsible : ""}
      data-variant={variant}
      data-side={side}
      data-slot="sidebar"
    >
      {/* This is what handles the sidebar gap on desktop */}
      <div
        className={cn(
          "relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]"
            : "group-data-[collapsible=icon]:w-(--sidebar-width-icon)",
        )}
      />
      <div
        className={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left"
            ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          // Adjust the padding for floating and inset variants.
          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]"
            : "group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className,
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm"
        >
          {children}
        </div>
      </div>
    </div>
  );
}

function SidebarTrigger({
  className,
  onClick,
  ...props
}: React.ComponentProps<typeof Button>) {
  const { toggleSidebar } = useSidebar();

  return (
    <Button
      data-sidebar="trigger"
      data-slot="sidebar-trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event);
        toggleSidebar();
      }}
      {...props}
    >
      <PanelLeftIcon />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
}

function SidebarRail({ className, ...props }: React.ComponentProps<"button">) {
  const { toggleSidebar } = useSidebar();

  return (
    <button
      data-sidebar="rail"
      data-slot="sidebar-rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex",
        "in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className,
      )}
      {...props}
    />
  );
}

function SidebarInset({ className, ...props }: React.ComponentProps<"main">) {
  return (
    <main
      data-slot="sidebar-inset"
      className={cn(
        "bg-background relative flex w-full flex-1 flex-col",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2",
        className,
      )}
      {...props}
    />
  );
}

function SidebarInput({
  className,
  ...props
}: React.ComponentProps<typeof Input>) {
  return (
    <Input
      data-slot="sidebar-input"
      data-sidebar="input"
      className={cn("bg-background h-8 w-full shadow-none", className)}
      {...props}
    />
  );
}

function SidebarHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-header"
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
}

function SidebarFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-footer"
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
}

function SidebarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof Separator>) {
  return (
    <Separator
      data-slot="sidebar-separator"
      data-sidebar="separator"
      className={cn("bg-sidebar-border mx-2 w-auto", className)}
      {...props}
    />
  );
}

function SidebarContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-content"
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className,
      )}
      {...props}
    />
  );
}

function SidebarGroup({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-group"
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  );
}

function SidebarGroupLabel({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<"div"> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "div";

  return (
    <Comp
      data-slot="sidebar-group-label"
      data-sidebar="group-label"
      className={cn(
        "text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className,
      )}
      {...props}
    />
  );
}

function SidebarGroupAction({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="sidebar-group-action"
      data-sidebar="group-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 md:after:hidden",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
}

function SidebarGroupContent({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-group-content"
      data-sidebar="group-content"
      className={cn("w-full text-sm", className)}
      {...props}
    />
  );
}

function SidebarMenu({ className, ...props }: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="sidebar-menu"
      data-sidebar="menu"
      className={cn("flex w-full min-w-0 flex-col gap-1", className)}
      {...props}
    />
  );
}

function SidebarMenuItem({ className, ...props }: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="sidebar-menu-item"
      data-sidebar="menu-item"
      className={cn("group/menu-item relative", className)}
      {...props}
    />
  );
}

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:p-0!",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

function SidebarMenuButton({
  asChild = false,
  isActive = false,
  variant = "default",
  size = "default",
  tooltip,
  className,
  ...props
}: React.ComponentProps<"button"> & {
  asChild?: boolean;
  isActive?: boolean;
  tooltip?: string | React.ComponentProps<typeof TooltipContent>;
} & VariantProps<typeof sidebarMenuButtonVariants>) {
  const Comp = asChild ? Slot : "button";
  const { isMobile, state } = useSidebar();

  const button = (
    <Comp
      data-slot="sidebar-menu-button"
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props}
    />
  );

  if (!tooltip) {
    return button;
  }

  if (typeof tooltip === "string") {
    tooltip = {
      children: tooltip,
    };
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side="right"
        align="center"
        hidden={state !== "collapsed" || isMobile}
        {...tooltip}
      />
    </Tooltip>
  );
}

function SidebarMenuAction({
  className,
  asChild = false,
  showOnHover = false,
  ...props
}: React.ComponentProps<"button"> & {
  asChild?: boolean;
  showOnHover?: boolean;
}) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="sidebar-menu-action"
      data-sidebar="menu-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 md:after:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0",
        className,
      )}
      {...props}
    />
  );
}

function SidebarMenuBadge({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-menu-badge"
      data-sidebar="menu-badge"
      className={cn(
        "text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none",
        "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
}

function SidebarMenuSkeleton({
  className,
  showIcon = false,
  ...props
}: React.ComponentProps<"div"> & {
  showIcon?: boolean;
}) {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);

  return (
    <div
      data-slot="sidebar-menu-skeleton"
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-(--skeleton-width) flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  );
}

function SidebarMenuSub({ className, ...props }: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="sidebar-menu-sub"
      data-sidebar="menu-sub"
      className={cn(
        "border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
}

function SidebarMenuSubItem({
  className,
  ...props
}: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="sidebar-menu-sub-item"
      data-sidebar="menu-sub-item"
      className={cn("group/menu-sub-item relative", className)}
      {...props}
    />
  );
}

function SidebarMenuSubButton({
  asChild = false,
  size = "md",
  isActive = false,
  className,
  ...props
}: React.ComponentProps<"a"> & {
  asChild?: boolean;
  size?: "sm" | "md";
  isActive?: boolean;
}) {
  const Comp = asChild ? Slot : "a";

  return (
    <Comp
      data-slot="sidebar-menu-sub-button"
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
}

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};

================
File: src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-primary/10 animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: src/components/ui/task-popover.tsx
================
export default function TaskPopover() {
  return (
    <div>TaskPoverper</div>
  )
}

================
File: src/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }

================
File: src/components/ui/time-picker.tsx
================
import { useState, useRef, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Command, CommandGroup, CommandItem } from "@/components/ui/command";

const times = Array.from({ length: 24 * 2 }, (_, i) => {
  const hour = Math.floor(i / 2);
  const minute = i % 2 === 0 ? "00" : "30";
  return `${hour.toString().padStart(2, "0")}:${minute}`;
});

export default function TimePicker({
  value,
  onChange,
}: {
  value: string;
  onChange: (val: string) => void;
}) {
  const [input, setInput] = useState(value);
  const [open, setOpen] = useState(false);
  const wrapperRef = useRef<HTMLDivElement>(null);

  const handleSelect = (val: string) => {
    onChange(val);
    setInput(val);
    setOpen(false);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const val = e.target.value;
  
    if (/^[0-9:]*$/.test(val)) {
      setInput(val);
  
      if (/^([01]\d|2[0-3]):[0-5]\d$/.test(val)) {
        onChange(val);
      }
    }
  };
  

  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (
        wrapperRef.current &&
        !wrapperRef.current.contains(e.target as Node)
      ) {
        setOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  return (
    <div className="relative w-32" ref={wrapperRef}>
      <Input
        value={input}
        onChange={handleInputChange}
        placeholder="hh:mm"
        className="h-8 w-32 text-sm"
        onFocus={(e) => {
          setOpen(true);
          e.target.select();
        }}
      />
      {open && (
        <div className="absolute z-10 mt-1 max-h-64 w-full overflow-y-auto rounded-md border bg-white shadow">
          <Command>
            <CommandGroup>
              {times.map((time) => (
                <CommandItem key={time} onSelect={() => handleSelect(time)}>
                  {time}
                </CommandItem>
              ))}
            </CommandGroup>
          </Command>
        </div>
      )}
    </div>
  );
}

================
File: src/components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: src/hooks/use-mobile.ts
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: src/index.css
================
@import "tailwindcss";


@plugin "tailwindcss-animate";

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  :root {
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

================
File: src/layout.tsx
================
import Sidebar from "./components/sidebar/SideBar";
import Toolbar from "@mui/material/Toolbar";
import Box from "@mui/material/Box";
import Header from "./components/header/Header";

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <Box sx={{ display: "flex", height: "100vh" }}>
      <Sidebar />
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          display: "flex",
          flexDirection: "column",
          height: "100vh",
          background: "#FFF2F2",
        }}
      >
        <Header />
        <Toolbar />
        <Box sx={{ flex: 1, pt: 3, px: 1, overflow: "auto" }}>{children}</Box>
      </Box>
    </Box>
  );
}

================
File: src/lib/axios.ts
================
import axios from "axios";

const instance = axios.create({
  baseURL: "http://localhost:8080/api/",
  headers: {
    "Content-Type": "application/json",
  },
});

instance.interceptors.request.use((config) => {
  const token = localStorage.getItem("accessToken");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default instance;

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/main.tsx
================
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { Provider } from 'react-redux';
import './index.css';
import store from './redux/store.tsx';
import App from './App.tsx';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </StrictMode>
);

================
File: src/pages/Auth.tsx
================
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store";
import SignIn from "@/components/auth/SignIn";
import SignUp from "@/components/auth/SignUp";
import PremiumList from "@/components/ui/premium-list";
import ForgotPassword from "@/components/auth/ForgotPassword";
import VerifyEmail from "@/components/auth/VerifyEmail";
import ResetPassword from "@/components/auth/ResetPassword";
import AuthHandler from "@/components/auth/AuthHandler";
import UserInfo from "@/components/auth/UserInfo";
const freeFeatures = [
  { text: "Quản lý thời gian", available: true },
  { text: "Pomodoro", available: true },
  { text: "Tham gia học nhóm", available: true },
  { text: "Không giới hạn lưu trữ tài liệu", available: false },
  { text: "AI hỗ trợ sắp xếp lịch", available: false }
];

const proFeatures = [
  { text: "Quản lý thời gian", available: true },
  { text: "Pomodoro", available: true },
  { text: "Tham gia học nhóm", available: true },
  { text: "Không giới hạn lưu trữ tài liệu", available: true },
  { text: "AI hỗ trợ sắp xếp lịch", available: true }
];

export default function Auth() {
  const step = useSelector((state: RootState) => state.auth.step);

  return (
    <>
      <AuthHandler />
      <div className="flex h-screen flex-col md:flex-row">
        <div className="flex w-full flex-1 items-center justify-center bg-gray-100 px-5">
          {step === "signIn" && <SignIn />}
          {step === "signUp" && <SignUp />}
          {step === "forgotPassword" && <ForgotPassword />}
          {step === "verifyAccount" && <VerifyEmail />}
          {step === "verifyResetPassword" && <VerifyEmail />}
          {step === "resetPassword" && <ResetPassword />}
          {step === "userInfo" && <UserInfo />}
        </div>

        <div className="hidden items-center justify-center md:flex">
          <div className="h-3/4 w-[2px] bg-gray-300"></div>
        </div>

        <div className="hidden w-1/2 items-center justify-center gap-2 bg-gray-100 md:flex">
          <PremiumList title="Miễn phí" features={freeFeatures} />
          <PremiumList title="Pro" features={proFeatures} />
        </div>
      </div>
    </>
  );
}

================
File: src/pages/Cleandar.tsx
================
import MonthView from "@/components/calendar/MonthView";
import DayView from "@/components/calendar/DayView";
import WeekView from "@/components/calendar/WeekView";
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store";
import PopUpCalen from "@/components/ui/popup-calendar";

export default function Cleandar() {
  const selectedViewMode = useSelector((state: RootState) => state.viewMode.selectedViewMode);

  const renderView = () => {
    switch (selectedViewMode) {
      case "day":
        return <DayView />;
      case "week":
        return <WeekView />;
      case "month":
      default:
        return <MonthView />;
    }
  };

  return (
    <div className="flex h-full w-full flex-1 rounded-2xl relative">
      {renderView()}
      <PopUpCalen />
    </div>
  );
}

================
File: src/pages/Dashboard.tsx
================
"use client";

import type React from "react";
import { useState, Fragment } from "react";
import { Avatar, IconButton } from "@mui/material";
import { Add, MoreHoriz } from "@mui/icons-material";
import "@fontsource/baloo-2";
import * as d3 from "d3";

export default function Dashboard() {
  const [selectedTab, setSelectedTab] = useState(0);

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setSelectedTab(newValue);
  };

  const year = 2025;
  const startDate = new Date(year, 0, 1);
  const endDate = new Date(year, 11, 31);
  const days = d3.timeDays(startDate, d3.timeDay.offset(endDate, 1));

  const sampleData = Array.from({ length: 365 }, (_, i) => {
    const d = new Date(2025, 0, 1);
    d.setDate(d.getDate() + i);
    return {
      date: d,
      value: Math.floor(Math.random() * 5),
    };
  });
  const dataMap = new Map(
    sampleData.map((d) => [d3.timeFormat("%Y-%m-%d")(d.date), d.value]),
  );

  const getColor = (value?: number): string => {
    if (!value) return "bg-gray-200";
    if (value < 2) return "bg-green-200";
    if (value < 4) return "bg-green-400";
    return "bg-green-600";
  };

  const weekCount = d3.timeWeek.count(startDate, endDate) + 1;

  return (
    <div className="mx-auto grid grid-cols-1 gap-6 lg:grid-cols-3">
      {/* Main Content - 2/3 width */}
      <div className="space-y-6 lg:col-span-2">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="mt-5">
            <h1 className="font-['Baloo_2',sans-serif] text-3xl font-bold text-[#4B4E6D]">
              Hi, Kim Ngân
            </h1>
            <p className="font-['Baloo_2',sans-serif] text-xl text-[#4B4E6D]">
              Let's finish your task today!
            </p>
          </div>
        </div>

        {/* Today Task Card */}
        <div className="flex justify-between rounded-3xl bg-white p-6">
          <div className="space-y-4">
            <h2 className="font-['Baloo_2',sans-serif] text-4xl font-bold text-red-500">
              Today Task
            </h2>
            <p className="font-['Baloo_2',sans-serif] text-lg text-red-500">
              Check your daily tasks and schedules
            </p>
            <button className="rounded-full bg-[#ff5470] px-6 py-3 font-['Baloo_2',sans-serif] font-medium text-white shadow-md">
              Today's schedule
            </button>
          </div>
          <div className="hidden md:block">
            <img
              src="src\assets\isometric-university-concept-background.png"
              alt="Task illustration"
              className="h-48"
            />
          </div>
        </div>

        {/* Task Cards */}
        <div className="mt-10 grid grid-cols-1 gap-4 md:grid-cols-3">
          {/* Web Dashboard Card */}
          <div className="rounded-3xl border bg-white p-5 shadow-xl">
            <div className="mb-2 flex items-center justify-between font-['Baloo_2',sans-serif] text-gray-400">
              <span>Mar 2, 2024</span>
              <IconButton size="small">
                <MoreHoriz fontSize="small" />
              </IconButton>
            </div>
            <h3 className="font-['Baloo_2',sans-serif] text-xl font-bold text-[#4B4D6E]">
              Web Dashboard
            </h3>
            <p className="font-['Baloo_2',sans-serif] text-gray-500">
              Designing
            </p>

            <div className="mt-4 flex items-center justify-between">
              <div className="flex -space-x-2">
                <Avatar
                  sx={{ width: 32, height: 32, border: "2px solid white" }}
                >
                  K
                </Avatar>
                <Avatar
                  sx={{ width: 32, height: 32, border: "2px solid white" }}
                >
                  N
                </Avatar>
              </div>
              <div className="flex gap-2">
                <button className="rounded-full bg-pink-100 p-1">
                  <Add className="text-pink-600" fontSize="small" />
                </button>
                <span className="rounded-full bg-pink-100 px-3 py-1 text-xs text-pink-600">
                  3 days left
                </span>
              </div>
            </div>
          </div>

          {/* Mobile App Card */}
          <div className="rounded-3xl border bg-white p-5 shadow-xl">
            <div className="mb-2 flex items-center justify-between font-['Baloo_2',sans-serif] text-gray-400">
              <span>Mar 6, 2024</span>
              <IconButton size="small">
                <MoreHoriz fontSize="small" />
              </IconButton>
            </div>
            <h3 className="font-['Baloo_2',sans-serif] text-xl font-bold text-[#4B4D6E]">
              Mobile App
            </h3>
            <p className="font-['Baloo_2',sans-serif] text-gray-500">
              Shopping
            </p>

            <div className="mt-4 flex items-center justify-between">
              <div className="flex -space-x-2">
                <Avatar
                  sx={{ width: 32, height: 32, border: "2px solid white" }}
                >
                  K
                </Avatar>
                <Avatar
                  sx={{ width: 32, height: 32, border: "2px solid white" }}
                >
                  N
                </Avatar>
              </div>
              <div className="flex gap-2">
                <button className="rounded-full bg-pink-100 p-1">
                  <Add className="text-pink-600" fontSize="small" />
                </button>
                <span className="rounded-full bg-pink-100 px-3 py-1 text-xs text-pink-600">
                  25 days left
                </span>
              </div>
            </div>
          </div>

          {/* Animation Card */}
          <div className="rounded-3xl border bg-white p-5 shadow-xl">
            <div className="mb-2 flex items-center justify-between font-['Baloo_2',sans-serif] text-gray-400">
              <span>Mar 8, 2024</span>
              <IconButton size="small">
                <MoreHoriz fontSize="small" />
              </IconButton>
            </div>
            <h3 className="font-['Baloo_2',sans-serif] text-xl font-bold text-[#4B4D6E]">
              Animation
            </h3>
            <p className="font-['Baloo_2',sans-serif] text-gray-500">
              Designing
            </p>

            <div className="mt-4 flex items-center justify-between">
              <div className="flex -space-x-2">
                <Avatar
                  sx={{ width: 32, height: 32, border: "2px solid white" }}
                >
                  K
                </Avatar>
              </div>
              <div className="flex gap-2">
                <button className="rounded-full bg-pink-100 p-1">
                  <Add className="text-pink-600" fontSize="small" />
                </button>
                <span className="rounded-full bg-pink-100 px-3 py-1 text-xs text-pink-600">
                  7 days left
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Contribution Graph */}
        <div className="mt-15 rounded-3xl bg-white p-6">
          <h2 className="mb-4 text-xl font-bold text-gray-800">
            Contribution Calendar - {year}
          </h2>
          <div className="overflow-x-auto">
            <div className="grid grid-cols-[40px_repeat(53,1fr)] gap-1">
              <div></div>
              {Array.from({ length: 53 }).map((_, i) => (
                <div key={i} className="text-center text-xs text-gray-400">
                  {i % 4 === 0
                    ? d3.timeFormat("%b")(d3.timeWeek.offset(startDate, i))
                    : ""}
                </div>
              ))}
              {["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map(
                (day, dayIdx) => (
                  <Fragment key={day}>
                    <div className="pr-2 text-right text-xs text-gray-400">
                      {day}
                    </div>
                    {Array.from({ length: 53 }).map((_, weekIdx) => {
                      const date = d3.timeWeek.offset(startDate, weekIdx);
                      date.setDate(date.getDate() + dayIdx);
                      if (date.getFullYear() !== year)
                        return <div key={weekIdx}></div>;
                      const key = d3.timeFormat("%Y-%m-%d")(date);
                      const value = dataMap.get(key);
                      return (
                        <div
                          key={weekIdx}
                          className={`h-4 w-4 rounded ${getColor(value)}`}
                          title={`${key}: ${value || 0}`}
                        ></div>
                      );
                    })}
                  </Fragment>
                ),
              )}
            </div>
          </div>

          {/* Legend */}
          <div className="mt-4 flex items-center justify-between">
            <div className="text-sm text-gray-500">
              Learn how we count contributions
            </div>
            <div className="flex items-center gap-2">
              <span className="text-sm text-gray-500">Less</span>
              <div className="flex gap-1">
                <div className="h-4 w-4 rounded bg-gray-200"></div>
                <div className="h-4 w-4 rounded bg-green-200"></div>
                <div className="h-4 w-4 rounded bg-green-400"></div>
                <div className="h-4 w-4 rounded bg-green-600"></div>
              </div>
              <span className="text-sm text-gray-500">More</span>
            </div>
          </div>
        </div>
      </div>

      {/* Sidebar - 1/3 width */}
      <div className="space-y-6">
        {/* User Profile */}
        <div className="rounded-3xl bg-white p-6">
          <div className="flex items-center gap-4">
            <Avatar sx={{ width: 48, height: 48 }}>K</Avatar>
            <div>
              <h3 className="font-['Baloo_2',sans-serif] text-xl font-bold">
                Kim Ngân
              </h3>
              <p className="font-['Baloo_2',sans-serif] text-gray-500">
                UI/Design
              </p>
            </div>
            <div className="mr-7 ml-auto flex items-center gap-2">
              <span className="text-4xl text-amber-500">🔥</span>
              <span className="mt-2 font-['Baloo_2',sans-serif] text-3xl font-bold text-amber-500">
                10
              </span>
            </div>
          </div>
        </div>

        {/* Calendar */}
        <div className="rounded-3xl bg-white p-6">
          <div className="mb-4 flex items-center justify-between">
            <h3 className="font-['Baloo_2',sans-serif] text-xl font-bold">
              March
            </h3>
            <button className="flex items-center gap-1 text-sm text-red-600">
              <Add fontSize="small" />
              Add Task
            </button>
          </div>

          <div className="mb-6 grid grid-cols-7 gap-2 font-['Baloo_2',sans-serif]">
            {[4, 5, 6, 7, 8, 9, 10].map((day, i) => {
              const isActive = day === 6;
              return (
                <div key={i} className="text-center">
                  <div
                    className={`mx-auto flex h-10 w-10 items-center justify-center rounded-full ${
                      isActive ? "bg-red-500 text-white" : ""
                    }`}
                  >
                    {day}
                  </div>
                  <div className="mt-1 font-['Baloo_2',sans-serif] text-xs text-gray-500">
                    {["mon", "tue", "wed", "thu", "fri", "sat", "sun"][i]}
                  </div>
                </div>
              );
            })}
          </div>

          {/* Schedule */}
          <div className="space-y-4">
            <div className="flex">
              <div className="w-16 font-['Baloo_2',sans-serif] text-gray-500">
                09:00
              </div>
            </div>

            <div className="flex">
              <div className="w-16 font-['Baloo_2',sans-serif] text-gray-500">
                10:00
              </div>
              <div className="relative flex-1">
                <div className="absolute top-0 bottom-0 left-0 w-1 bg-red-600"></div>
                <div className="ml-6 rounded-lg bg-white p-3 shadow-sm">
                  <div className="flex justify-between">
                    <h4 className="font-['Baloo_2',sans-serif] font-bold">
                      UI Motion
                    </h4>
                    <IconButton size="small">
                      <MoreHoriz fontSize="small" />
                    </IconButton>
                  </div>
                  <p className="text-sm text-gray-500">10:00am - 12:00pm</p>
                </div>
              </div>
            </div>

            <div className="flex">
              <div className="w-16 font-['Baloo_2',sans-serif] text-gray-500">
                11:00
              </div>
            </div>

            <div className="flex">
              <div className="w-16 font-['Baloo_2',sans-serif] text-gray-500">
                12:00
              </div>
              <div className="relative flex-1">
                <div className="absolute top-0 bottom-0 left-0 w-1 bg-red-600"></div>
                <div className="ml-6 rounded-lg bg-white p-3 shadow-sm">
                  <div className="flex justify-between">
                    <h4 className="font-['Baloo_2',sans-serif] font-bold">
                      UI Design
                    </h4>
                    <IconButton size="small">
                      <MoreHoriz fontSize="small" />
                    </IconButton>
                  </div>
                  <p className="font-['Baloo_2',sans-serif] text-sm text-gray-500">
                    12:00pm - 01:00pm
                  </p>
                </div>
              </div>
            </div>

            <div className="flex">
              <div className="w-16 font-['Baloo_2',sans-serif] text-gray-500">
                01:00
              </div>
            </div>
          </div>
        </div>

        {/* Ranking */}
        <div className="rounded-3xl bg-white px-6 py-3">
          <div className="mb-4 flex justify-center">
            <h3 className="flex items-center gap-2 font-['Baloo_2',sans-serif] text-2xl font-bold">
              Ranking
              <span className="text-3xl">🏆</span>
            </h3>
          </div>

          {/* Ranking Item 1 */}
          <div className="mb-3 flex items-center rounded-xl bg-[#FFF2F2] p-4">
            <div className="mr-2 text-4xl text-amber-500">🥇</div>
            <img
              src="src\assets\image.png"
              alt=""
              className="h-10 w-10 rounded-full"
            />
            <div className="ml-3">
              <h4 className="font-['Baloo_2',sans-serif] font-bold">Chây 97</h4>
              <p className="flex items-center text-xs text-amber-500">
                <span className="mr-1 text-xl">🔥</span> 684 ngày
              </p>
            </div>
            <div className="ml-auto">
              <img
                src="src\assets\diamond-svgrepo-com.svg"
                alt=""
                className="h-8 w-8 rounded-full"
              />
            </div>
          </div>

          {/* Ranking Item 2 */}
          <div className="mb-3 flex items-center rounded-xl bg-[#FFF2F2] p-4">
            <div className="mr-2 text-4xl text-gray-400">🥈</div>
            <Avatar sx={{ width: 40, height: 40 }}>H</Avatar>
            <div className="ml-3">
              <h4 className="font-['Baloo_2',sans-serif] font-bold">Vi rút</h4>
              <p className="flex items-center text-xs text-amber-500">
                <span className="mr-1 text-xl">🔥</span> 332 ngày
              </p>
            </div>
            <div className="ml-auto">
              <img
                src="src\assets\gold-medal-svgrepo-com.svg"
                alt=""
                className="w8 h-8 rounded-full"
              />
            </div>
          </div>

          {/* Ranking Item 3 */}
          <div className="mb-3 flex items-center rounded-xl bg-[#FFF2F2] p-4">
            <div className="mr-2 text-4xl text-amber-700">🥉</div>
            <Avatar sx={{ width: 40, height: 40 }}>Đ</Avatar>
            <div className="ml-3">
              <h4 className="font-['Baloo_2',sans-serif] font-bold">
                Lép Đích
              </h4>
              <p className="flex items-center text-xs text-amber-500">
                <span className="mr-1 text-xl">🔥</span> 100 ngày
              </p>
            </div>
            <div className="ml-auto">
              <img
                src="src\assets\gold-medal-svgrepo-com.svg"
                alt=""
                className="w8 h-8 rounded-full"
              />
            </div>
          </div>

          <div className="mt-4 flex justify-center">
            <button className="rounded-full bg-white px-6 py-2 font-['Baloo_2',sans-serif] font-medium text-gray-600 shadow-sm">
              See all
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/pages/Home.tsx
================
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store";
import Layout from "@/layout";
import Calendar from "./Cleandar";
import Pomodoro from "./Pomodoro";
import Dashboard from "./Dashboard";

const Main = () => {
  const page = useSelector((state: RootState) => state.page.currentPage);

  const renderPage = () => {
    switch (page) {
      case "calendar":
        return <Calendar />;
      case "pomodoro":
        return <Pomodoro />;
      case "dashboard":
      default:
        return <Dashboard />;
    }
  };

  return <Layout>{renderPage()}</Layout>;
};

export default Main;

================
File: src/pages/LandingPage.tsx
================
import logo from "../assets/TaskRacerLogo.png";
import { Button } from "@/components/ui/button";
import NavBar from "@/components/ui/nav-bar";
import { useAppDispatch } from "@/redux/store";
import { useNavigate } from "react-router-dom";
import { setStep } from "@/redux/auth/authSlice";

export default function Home() {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  return (
    <div className="flex min-h-screen flex-col bg-gradient-to-b from-white to-blue-50/50">
      <NavBar />

      <main className="flex flex-1">
        <section className="container mx-auto flex flex-1 flex-col items-center justify-center px-4 text-center">
          <h1 className="mx-auto mb-6 max-w-4xl text-4xl font-bold text-[#1E1A34] md:text-6xl">
            Hoàn thành dự án nhanh hơn 300%.
          </h1>
          <p className="mx-auto mb-10 max-w-3xl text-lg text-[#1E1A34]/80 md:text-xl">
            Ứng dụng “tất cả trong một” cho công việc. Một nơi duy nhất để các
            nhóm mọi quy mô giao tiếp và hoàn thành công việc.
          </p>

          <div className="flex flex-col items-center">
            <Button
              className="h-auto rounded-full bg-gradient-to-r from-[#FF3B30] to-[#cc9600] px-8 py-6 text-lg font-semibold text-white shadow-lg transition-all hover:shadow-xl hover:brightness-110"
              onClick={() => {
                dispatch(setStep("signUp"));
                navigate("/auth");
              }}
            >
              Bắt đầu ngay. Miễn phí 100%!
            </Button>
            <p className="mt-3 text-sm text-gray-500">
              Miễn phí mãi mãi. Không cần thẻ tín dụng.
            </p>
          </div>
        </section>
      </main>
    </div>
  );
}

================
File: src/pages/Pomodoro.tsx
================
import Typography from "@mui/material/Typography";
import { useEffect, useRef, useState } from "react";
import { Edit } from "lucide-react";
// import "@fontsource/baloo-2";
import { SettingsDialog } from "@/components/ui/setting-pomodoro";
import { useSelector } from "react-redux";
import { RootState, useAppDispatch } from "@/redux/store";
import {
  setMode,
  setTime,
  setIsActive,
  setButtonText,
  setProgress,
  setCompletedSessions,
} from "@/redux/pomodoro/pomodoro.slice";

const Pomodoro = () => {
  const dispatch = useAppDispatch();
  const {
    settings,
    mode,
    time,
    isActive,
    buttonText,
    progress,
    completedSessions,
  } = useSelector((state: RootState) => state.pomodoro);

  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);

  const modes = {
    focus: { label: "Focus", duration: settings.pomodoro },
    shortBreak: { label: "Short Break", duration: settings.shortBreak },
    longBreak: { label: "Long Break", duration: settings.longBreak },
  };

  useEffect(() => {
    dispatch(setTime({ minutes: modes[mode].duration, seconds: 0 }));
    dispatch(setIsActive(false));
    dispatch(setButtonText("Start"));
    dispatch(setProgress(100));

    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  }, [mode, settings, dispatch]);

  useEffect(() => {
    const totalSeconds = modes[mode].duration * 60;
    const currentSeconds = time.minutes * 60 + time.seconds;
    dispatch(setProgress((currentSeconds / totalSeconds) * 100));
  }, [time, mode, dispatch]);

  const handleTimerComplete = () => {
    const newSessions = completedSessions + 1;
    const isLongBreak = newSessions % settings.longBreakInterval === 0;

    dispatch(setCompletedSessions(isLongBreak ? 0 : newSessions));

    if (mode === "focus") {
      if (settings.autoStartBreaks) {
        dispatch(setMode(isLongBreak ? "longBreak" : "shortBreak"));
        dispatch(setIsActive(true));
        dispatch(setButtonText("Pause"));
      } else {
        dispatch(setIsActive(false));
        dispatch(setButtonText("Start"));
      }
    } else {
      if (settings.autoStartPomodoros) {
        dispatch(setMode("focus"));
        dispatch(setIsActive(true));
        dispatch(setButtonText("Pause"));
      } else {
        dispatch(setIsActive(false));
        dispatch(setButtonText("Start"));
      }
    }
  };

  useEffect(() => {
    if (isActive) {
      intervalRef.current = setInterval(() => {
        const { minutes, seconds } = time;
        let updatedTime;

        if (seconds === 0) {
          if (minutes === 0) {
            clearInterval(intervalRef.current!);
            intervalRef.current = null;
            handleTimerComplete();
            updatedTime = { minutes: modes[mode].duration, seconds: 0 };
          } else {
            updatedTime = { minutes: minutes - 1, seconds: 59 };
          }
        } else {
          updatedTime = { minutes, seconds: seconds - 1 };
        }

        dispatch(setTime(updatedTime));
      }, 1000);
    } else if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    };
  }, [isActive, mode, time, settings]);

  const toggleTimer = () => {
    dispatch(setIsActive(!isActive));
    dispatch(setButtonText(isActive ? "Start" : "Pause"));
  };

  const formatTime = (minutes: number, seconds: number) => {
    return `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
  };

  const radius = 120;
  const circumference = 2 * Math.PI * radius;
  const strokeDashoffset = circumference * (1 - progress / 100);

  return (
    <div className="mx-auto flex max-w-3xl flex-col items-center px-6">
      <div className="mb-8 flex w-full items-center justify-between">
        <Typography
          variant="h4"
          sx={{
            fontFamily: "'Baloo 2', sans-serif",
            fontWeight: 600,
            color: "#4B4E6D",
          }}
        >
          Pomodoro
        </Typography>
        <button
          className="p-2 text-slate-700 cursor-pointer"
          onClick={() => setIsSettingsOpen(true)}
        >
          <Edit size={38} />
        </button>
      </div>

      <div className="mb-15 flex w-full gap-2">
        {Object.entries(modes).map(([key, { label }]) => (
          <button
            key={key}
            onClick={() =>
              dispatch(setMode(key as "focus" | "shortBreak" | "longBreak"))
            }
            className={`flex-1 rounded-full px-4 py-3 font-['Baloo_2',sans-serif] text-lg font-semibold transition-colors cursor-pointer ${
              mode === key
                ? "bg-[#FFD6D6] text-[#4B4E6D]"
                : "text-[#4B4E6D] hover:bg-gray-100"
            }`}
          >
            {label}
          </button>
        ))}
      </div>

      <div className="relative mb-15 flex h-84 w-84 items-center justify-center">
        <svg
          className="absolute h-full w-full -rotate-90"
          viewBox="0 0 256 256"
        >
          <circle
            cx="128"
            cy="128"
            r={radius}
            fill="none"
            stroke="#f1f1f1"
            strokeWidth="8"
          />
          <circle
            cx="128"
            cy="128"
            r={radius}
            fill="none"
            stroke="#F3737E"
            strokeWidth="6"
            strokeDasharray={circumference}
            strokeDashoffset={strokeDashoffset}
            strokeLinecap="round"
          />
        </svg>

        <div className="z-10">
          <span className="font-['Baloo_2',sans-serif] text-7xl font-bold">
            {formatTime(time.minutes, time.seconds)}
          </span>
        </div>
      </div>

      <div className="mb-4 text-center">
        <span className="font-['Baloo_2',sans-serif] text-sm text-[#4B4E6D]">
          Sessions: {completedSessions} / {settings.longBreakInterval}
        </span>
      </div>

      <button
        onClick={toggleTimer}
        className=" cursor-pointer mb-12 rounded-md border border-slate-300 bg-white px-12 py-3 font-['Baloo_2',sans-serif] text-2xl font-semibold text-slate-600 shadow-md transition-all hover:shadow-lg active:translate-y-1 active:shadow-sm"
      >
        {buttonText}
      </button>

      <SettingsDialog open={isSettingsOpen} onOpenChange={setIsSettingsOpen} />
    </div>
  );
};

export default Pomodoro;

================
File: src/pages/Premium.tsx
================
import PremiumList from "@/components/ui/premium-list";
import Logo from "@/components/ui/Logo";
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store";
import { useDispatch } from "react-redux";
import { selectPlan } from "@/redux/premium/premium.slice";
import { setStep } from "@/redux/auth/authSlice";
import { useNavigate } from "react-router-dom";

const plans = [
  {
    id: "month",
    label: "Hàng tháng",
    price: "100.000₫",
    note: "100.000₫ thanh toán hàng tháng",
    highlight: null,
  },
  {
    id: "year",
    label: "Hàng năm",
    price: "35.000₫",
    note: "420.000₫ mỗi 12 tháng",
    highlight: "Giá trị tốt nhất",
    tag: "Tiết kiệm 65%",
  },
  {
    id: "half-year",
    label: "Nửa năm",
    price: "60.000₫",
    note: "360.000₫ mỗi 6 tháng",
    tag: "Tiết kiệm 40%",
  },
];

const freeFeatures = [
  { text: "Lưu ghi chú của bạn", available: true },
  { text: "Thực hành các bài toán", available: true },
  { text: "Cài đặt tuỳ chỉnh", available: true },
  { text: "Các bước giải quyết đầy đủ", available: false },
  { text: "Đăng ký Web & Di động", available: false },
  { text: "Đánh giá", available: false },
  { text: "Báo cáo tiến độ chi tiết", available: false },
  { text: "Không có quảng cáo", available: false },
];

const proFeatures = [
  { text: "Lưu ghi chú của bạn", available: true },
  { text: "Thực hành các bài toán", available: true },
  { text: "Cài đặt tuỳ chỉnh", available: true },
  { text: "Các bước giải quyết đầy đủ", available: true },
  { text: "Đăng ký Web & Di động", available: true },
  { text: "Đánh giá", available: true },
  { text: "Báo cáo tiến độ chi tiết", available: true },
  { text: "Không có quảng cáo", available: true },
];

export default function Premium() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const selectedPlan = useSelector(
    (state: RootState) => state.premium.selected,
  );

  const getZIndex = (id: string) => {
    if (id === selectedPlan) return 20;
    if (id === "year") return 10;
    return 0;
  };

  const onSubmit = () => {
    const accessToken = localStorage.getItem("accessToken");
    if (!accessToken) {
      dispatch(setStep("signUp"));
      navigate("/auth");
      return;
    }
  };

  return (
    <div className="flex h-screen flex-col bg-gray-100 md:flex-row">
      <div className="flex w-full flex-1 flex-col items-center justify-center py-8 md:px-20">
        <Logo className="mb-2" />
        <h1 className="mb-2 text-center text-3xl font-bold">Đăng ký tới Pro</h1>
        <div className="mb-8 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
          {plans.map((plan, i) => {
            const isSelected = plan.id === selectedPlan;
            return (
              <motion.div
                key={i}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                transition={{ type: "spring", stiffness: 300 }}
                style={{ zIndex: getZIndex(plan.id) }}
                className="relative"
                onClick={() => dispatch(selectPlan(plan.id))}
              >
                <Card
                  className={`w-60 cursor-pointer p-6 text-center shadow-md ${
                    isSelected ? "border-2 border-yellow-400" : "border"
                  }`}
                >
                  <CardContent className="flex flex-col items-center justify-center gap-1 p-0">
                    {plan.tag && (
                      <p className="text-sm font-semibold text-purple-600">
                        {plan.tag}
                      </p>
                    )}
                    <p className="text-lg font-medium">{plan.label}</p>
                    <p className="my-2 text-3xl font-bold">{plan.price}</p>
                    <p className="text-muted-foreground text-sm">{plan.note}</p>
                    {plan.highlight && (
                      <p className="mt-2 rounded bg-yellow-300 py-1 font-bold text-yellow-900">
                        {plan.highlight}
                      </p>
                    )}
                  </CardContent>
                </Card>
              </motion.div>
            );
          })}
        </div>
        <Button
          onClick={onSubmit}
          className="h-auto rounded-full bg-gradient-to-r from-[#FF3B30] to-[#cc9600] px-6 py-3 text-base font-semibold text-white shadow-md transition-all hover:shadow-lg hover:brightness-110"
        >
          Đăng ký ngay
        </Button>
      </div>

      <div className="hidden items-center justify-center md:flex">
        <div className="h-3/4 w-[2px] bg-gray-300"></div>
      </div>

      <div className="hidden w-1/2 items-center justify-center gap-2 bg-gray-100 md:flex">
        <PremiumList title="Miễn phí" features={freeFeatures} />
        <PremiumList title="Pro" features={proFeatures} />
      </div>
    </div>
  );
}

================
File: src/redux/auth/authSlice.tsx
================
import { createSlice, PayloadAction, createAsyncThunk } from "@reduxjs/toolkit";
import axios from "@/lib/axios";
import { AxiosError } from "axios";
const API_URL = import.meta.env.VITE_API_URL;

interface AuthState {
  step:
    | "signIn"
    | "signUp"
    | "forgotPassword"
    | "verifyAccount"
    | "verifyResetPassword"
    | "resetPassword"
    | "userInfo";
  user: {
    email: string;
    username: string;
    password: string;
    loading: boolean;
    error: string | null;
    resetToken: string | null;
    accessToken: string | null;
    active: boolean;
  };
}

const initialState: AuthState = {
  step: "signIn",
  user: {
    email: "",
    username: "",
    password: "",
    loading: false,
    error: null,
    resetToken: null,
    accessToken: null,
    active: false,
  },
};

export const changePassword = createAsyncThunk(
  "auth/changePassword",
  async (
    { token, newPassword }: { token: string; newPassword: string },
    { rejectWithValue },
  ) => {
    try {
      const response = await axios.post(
        `${API_URL}auth/change-password`,
        { token, "new-password": newPassword },
        { headers: { "Content-Type": "application/json" } },
      );
      console.log(response.data);
      return response.data;
    } catch (error) {
      return rejectWithValue(
        (error as AxiosError<{ message: string }>)?.response?.data?.message ||
          "Lỗi thay đổi mật khẩu, vui lòng thử lại!",
      );
    }
  },
);

export const refreshToken = createAsyncThunk(
  "auth/refreshToken",
  async (_, { rejectWithValue }) => {
    try {
      const response = await axios.post<{
        message: string;
        code: string;
        status: boolean;
        data: { accessToken: string };
      }>("auth/refresh", {}, { withCredentials: true });

      return response.data.data.accessToken;
    } catch (error) {
      return rejectWithValue(
        (error as AxiosError<{ message: string }>)?.response?.data?.message ||
          "Lỗi làm mới phiên đăng nhập, vui lòng thử lại!",
      );
    }
  },
);

export const verifyOtpForgotPassword = createAsyncThunk(
  "auth/verifyOtpForgotPassword",
  async (otpCode: string, { rejectWithValue }) => {
    try {
      const response = await axios.post<{
        message: string;
        code: string;
        status: boolean;
        data: { token: string };
      }>(`${API_URL}auth/verify-otp-forgot-password`, { otp: otpCode });

      return response.data.data.token;
    } catch (error) {
      return rejectWithValue(
        (error as AxiosError<{ message: string }>)?.response?.data?.message ||
          "Lỗi xác minh OTP, vui lòng thử lại!",
      );
    }
  },
);

export const resendEmailVerification = createAsyncThunk(
  "auth/resendEmailVerification",
  async (account: string, { rejectWithValue }) => {
    console.log(account);
    try {
      const response = await axios.post<{ message: string }>(
        `${API_URL}auth/resend-email`,
        { account },
        { headers: { "Content-Type": "application/json" } },
      );
      return response.data;
    } catch (error) {
      return rejectWithValue(
        (error as AxiosError<{ message: string }>)?.response?.data?.message ||
          "Lỗi gửi lại email, vui lòng thử lại!",
      );
    }
  },
);

export const sendOtpForgotPassword = createAsyncThunk(
  "auth/sendOtpForgotPassword",
  async (account: string, { rejectWithValue }) => {
    try {
      const response = await axios.post<{ message: string }>(
        `${API_URL}auth/send-otp-forgot-password`,
        { account },
        { headers: { "Content-Type": "application/json" } },
      );
      return response.data;
    } catch (error) {
      const apiError = (
        error as AxiosError<{
          data?: { error_message?: string };
          message?: string;
        }>
      )?.response?.data;
      let errorMessage = apiError?.message || "Lỗi gửi OTP, vui lòng thử lại!";

      if (apiError?.data?.error_message === "Email or username not found.") {
        errorMessage = "Tài khoản hoặc email không tồn tại";
      }

      return rejectWithValue(errorMessage);
    }
  },
);

export const signInUser = createAsyncThunk(
  "auth/signInUser",
  async (
    userData: { email: string; password: string },
    { rejectWithValue },
  ) => {
    try {
      const requestData = {
        account: userData.email,
        password: userData.password,
      };  

      const response = await axios.post<{ token: string }>(
        `${API_URL}auth/sign-in`,
        requestData,
        {
          headers: { "Content-Type": "application/json" },
          withCredentials: true,
        },
      ).catch((res) => {console.log(res);});

      return response.data;
    } catch (error) {
      let errorMessage = "Đăng nhập thất bại";

      const apiError = (
        error as AxiosError<{
          data?: { error_message?: string };
          message?: string;
        }>
      )?.response?.data;
      console.log(apiError?.data?.error_message);

      switch (apiError?.data?.error_message) {
        case "User not found.":
          errorMessage = "Tài khoản hoặc mật khẩu không đúng";
          break;
        default:
          errorMessage = apiError?.message || "Đăng nhập thất bại";
      }

      console.log(errorMessage);
      return rejectWithValue(errorMessage);
    }
  },
);

export const signUpUser = createAsyncThunk(
  "auth/signUpUser",
  async (
    userData: { email: string; username: string; password: string },
    { rejectWithValue },
  ) => {
    try {
      const response = await axios.post<{ success: boolean }>(
        `${API_URL}auth/sign-up`,
        userData,
        { headers: { "Content-Type": "application/json" } },
      );
      return response.data;
    } catch (error) {
      const errorMessage =
        (error as AxiosError<{ data: { error_message: string } }>)?.response
          ?.data?.data?.error_message || "Đã xảy ra lỗi";

      if (errorMessage === "Username or email already exists.") {
        return rejectWithValue("Tên đăng nhập hoặc email đã tồn tại");
      }

      return rejectWithValue(errorMessage);
    }
  },
);

export const verifyAccount = createAsyncThunk(
  "auth/verifyAccount",
  async (otpCode: string, { rejectWithValue }) => {
    try {
      const response = await axios.post<{ success: boolean }>(
        `${API_URL}auth/verify-account`,
        { otp: otpCode },
      );
      console.log("verifyAccount response:", response.data);
      return response.data;
    } catch (error) {
      console.error("verifyAccount error:", error);
      return rejectWithValue(
        (error as AxiosError<{ message: string }>)?.response?.data?.message ||
          "Lỗi xác minh tài khoản",
      );
    }
  },
);

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setStep: (state, action: PayloadAction<AuthState["step"]>) => {
      state.step = action.payload;
    },
    setUserEmail: (state, action: PayloadAction<string>) => {
      state.user.email = action.payload;
    },
    setUserUsername: (state, action: PayloadAction<string>) => {
      state.user.username = action.payload;
    },
    setUserPassword: (state, action: PayloadAction<string>) => {
      state.user.password = action.payload;
    },
    setUserLoading: (state, action: PayloadAction<boolean>) => {
      state.user.loading = action.payload;
    },
    setUserError: (state, action: PayloadAction<string | null>) => {
      state.user.error = action.payload;
    },
    setResetToken: (state, action: PayloadAction<string | null>) => {
      state.user.resetToken = action.payload;
    },
    resetAuthState: () => initialState,
  },
  extraReducers: (builder) => {
    builder
      .addCase(signUpUser.pending, (state) => {
        state.user.loading = true;
        state.user.error = null;
      })
      .addCase(signUpUser.fulfilled, (state, action) => {
        state.user.loading = false;
        state.user = { ...state.user, ...action.payload };
        state.step = "verifyAccount";
      })
      .addCase(signUpUser.rejected, (state, action) => {
        state.user.loading = false;
        state.user.error = action.payload as string;
      })
      .addCase(signInUser.pending, (state) => {
        state.user.loading = true;
        state.user.error = null;
      })
      .addCase(signInUser.fulfilled, (state, action) => {
        console.log("signInUser success:", action.payload);

        state.user.loading = false;
        state.user.accessToken = action.payload?.data?.access_token;
        state.user.active = action.payload?.data?.active ?? false;

        if (state.user.accessToken) {
          localStorage.setItem("accessToken", state.user.accessToken);
        }

        if (!state.user.active) {
          state.step = "verifyAccount";
          resendEmailVerification(state.user.email);
        }
      })
      .addCase(signInUser.rejected, (state, action) => {
        console.error("signInUser error:", action.payload);
        state.user.loading = false;
        state.user.error = action.payload as string;
      })
      .addCase(sendOtpForgotPassword.pending, (state) => {
        state.user.loading = true;
        state.user.error = null;
      })
      .addCase(sendOtpForgotPassword.fulfilled, (state) => {
        state.user.loading = false;
        state.step = "verifyResetPassword";
      })
      .addCase(sendOtpForgotPassword.rejected, (state, action) => {
        state.user.loading = false;
        state.user.error = action.payload as string;
      })
      .addCase(verifyOtpForgotPassword.pending, (state) => {
        state.user.loading = true;
        state.user.error = null;
      })
      .addCase(verifyOtpForgotPassword.fulfilled, (state, action) => {
        console.log("Received Token:", action.payload);
        state.user.loading = false;
        state.user.resetToken = action.payload;
        console.log(state.user.resetToken);
        state.step = "resetPassword";
      })
      .addCase(verifyOtpForgotPassword.rejected, (state, action) => {
        state.user.loading = false;
        state.user.error = action.payload as string;
      })
      .addCase(verifyAccount.pending, (state) => {
        state.user.loading = true;
        state.user.error = null;
      })
      .addCase(verifyAccount.fulfilled, (state, action) => {
        state.user.loading = false;
        state.step = "signIn";
        localStorage.setItem("accessToken", action.payload.data.access_token);
      })
      .addCase(verifyAccount.rejected, (state, action) => {
        state.user.loading = false;
        state.user.error = action.payload as string;
      });
  },
});

export const {
  setStep,
  setUserEmail,
  setUserUsername,
  setUserPassword,
  setUserLoading,
  setUserError,
  setResetToken,
  resetAuthState,
} = authSlice.actions;

export default authSlice.reducer;

================
File: src/redux/calendar/popupCalen.slice.tsx
================
import { PayloadAction, createSlice } from "@reduxjs/toolkit";
import dayjs from "dayjs";
import { createAsyncThunk } from "@reduxjs/toolkit";
import axios from "@/lib/axios";
const API_URL = import.meta.env.VITE_API_URL;

interface PopupState {
  isOpen: boolean;
  selectedDate: dayjs.Dayjs | null;
  isSetTime: boolean;
  startTime: string | null;
  endTime: string | null;
  status: "TODO" | "IN_PROGRESS" | "DONE" | "CANCELED" | null;
  priority: "LOW" | "MEDIUM" | "HIGH" | null;
  description: string | null;
  title: string | null;
}

const initialState: PopupState = {
  isOpen: false,
  selectedDate: null,
  isSetTime: false,
  startTime: null,
  endTime: null,
  status: null,
  priority: null,
  description: null,
  title: null,
};

export const createTask = createAsyncThunk(
  "task/create",
  async (
    {
      title,
      priority,
      description,
      startAt,
      dueAt,
      status,
    }: {
      title: string;
      priority: "LOW" | "MEDIUM" | "HIGH";
      description: string;
      startAt: string;
      dueAt: string;
      status: "TODO" | "IN_PROGRESS" | "DONE" | "CANCELED";
    },
    { rejectWithValue }
  ) => {
    try {
      const response = await axios.post(`${API_URL}content/task`, {
        type: "USER",
        content: title,
        priority,
        description,
        startAt,
        dueAt,
        status,
      });
      console.log("✅ Task created:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("❌ Create task failed:", error.response?.data || error);
      return rejectWithValue(error.response?.data || "Đã có lỗi xảy ra");
    }
  }
);

const popupCalenSlice = createSlice({
  name: "popupCalen",
  initialState,
  reducers: {
    open: (state, action: PayloadAction<string>) => {
      const selected = dayjs(action.payload);
      state.isOpen = true;
      state.selectedDate = selected;
      state.startTime = selected.hour(11).minute(0).format("HH:mm");
      state.endTime = selected.hour(12).minute(0).format("HH:mm");
    },
    close: (state) => {
      Object.assign(state, initialState);
    },
    setTime: (state, action: PayloadAction<boolean>) => {
      state.isSetTime = action.payload;
    },
    setStartTime: (state, action: PayloadAction<string>) => {
      state.startTime = action.payload;
    },
    setEndTime: (state, action: PayloadAction<string>) => {
      state.endTime = action.payload;
    },
    setStatus: (
      state,
      action: PayloadAction<"TODO" | "IN_PROGRESS" | "DONE" | "CANCELED">,
    ) => {
      state.status = action.payload;
    },
    setPriority: (state, action: PayloadAction<"LOW" | "MEDIUM" | "HIGH">) => {
      state.priority = action.payload;
    },
    setDescription: (state, action: PayloadAction<string>) => {
      state.description = action.payload;
    },
    setTitle: (state, action: PayloadAction<string>) => {
      state.title = action.payload;
    },    
  },
});

export const {
  open,
  close,
  setTime,
  setStartTime,
  setEndTime,
  setPriority,
  setStatus,
  setDescription,
  setTitle,
} = popupCalenSlice.actions;
export default popupCalenSlice.reducer;

================
File: src/redux/calendar/selectedDate.slide.tsx
================
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import {
  getCurrentDate,
  formatVietnameseDate,
  formatVietnameseMonth,
} from "@/utils/date";
import dayjs from "dayjs";

const currentDate = getCurrentDate();

const initialState = {
  selectedDate: currentDate,
  vietnameseDate: formatVietnameseDate(currentDate),
  vietnameseMonth: formatVietnameseMonth(currentDate),
};

const dateSlice = createSlice({
  name: "date",
  initialState,
  reducers: {
    setSelectedDate: (state, action: PayloadAction<Date>) => {
      state.selectedDate = action.payload;
      state.vietnameseDate = formatVietnameseDate(action.payload);
    },
    resetToCurrentDate: (state) => {
      const currentDate = getCurrentDate();
      state.selectedDate = currentDate;
      state.vietnameseDate = formatVietnameseDate(currentDate);
    },
    nextDate: (state) => {
      const nextDate = dayjs(state.selectedDate).add(1, "day").toDate();
      state.selectedDate = nextDate;
      state.vietnameseDate = formatVietnameseDate(nextDate);
    },
    prevDate: (state) => {
      const prevDate = dayjs(state.selectedDate).subtract(1, "day").toDate();
      state.selectedDate = prevDate;
      state.vietnameseDate = formatVietnameseDate(prevDate);
    },
    nextMonth: (state) => {
      const nextMonth = dayjs(state.selectedDate).add(1, "month").toDate();
      state.selectedDate = nextMonth;
      state.vietnameseDate = formatVietnameseDate(nextMonth);
      state.vietnameseMonth = formatVietnameseMonth(nextMonth);
    },
    prevMonth: (state) => {
      const prevMonth = dayjs(state.selectedDate).subtract(1, "month").toDate();
      state.selectedDate = prevMonth;
      state.vietnameseDate = formatVietnameseDate(prevMonth);
      state.vietnameseMonth = formatVietnameseMonth(prevMonth);
    },
  },
});

export const {
  setSelectedDate,
  resetToCurrentDate,
  nextDate,
  prevDate,
  nextMonth,
  prevMonth,
} = dateSlice.actions;
export default dateSlice.reducer;

================
File: src/redux/calendar/task.slice.tsx
================
// features/tasks/taskSlice.ts
import { createSlice, createAsyncThunk, PayloadAction } from "@reduxjs/toolkit";
import axios from "@/lib/axios";
import { AxiosError } from "axios";
const API_URL = import.meta.env.VITE_API_URL;

export type Task = {
  id: string;
  title: string;
  content: string;
  description: string;
  start: string;
  end: string;
  priority: 'LOW' | 'MEDIUM' | 'HIGH';
  status: 'TODO' | 'IN_PROGRESS' | 'DONE';
};

type TaskState = {
  tasks: Task[];
  loading: boolean;
};

const initialState: TaskState = {
  tasks: [],
  loading: false,
};

export const fetchTasks = createAsyncThunk("tasks/fetchTasks", async (_, { rejectWithValue }) => {
  try {
    const res = await axios.get(`${API_URL}content/tasks`);
    console.log("All tasks:", res.data.data);
    return res.data.data;
  } catch (error) {
    const err = error as AxiosError;
    console.error("Fetch tasks error:", err.response?.data || err.message);
    return rejectWithValue(err.response?.data || err.message);
  }
});

const taskSlice = createSlice({
  name: "tasks",
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchTasks.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchTasks.fulfilled, (state, action: PayloadAction<Task[]>) => {
        state.tasks = action.payload;
        state.loading = false;
      })
      .addCase(fetchTasks.rejected, (state) => {
        state.loading = false;
      });
  },
});

export default taskSlice.reducer;

================
File: src/redux/calendar/ViewMode.tsx
================
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

type ViewMode = 'day' | 'week' | 'month';

interface ViewModeState {
  selectedViewMode: ViewMode;
}

const initialState: ViewModeState = {
  selectedViewMode: 'month',
};

const viewModeSlice = createSlice({
  name: 'viewMode',
  initialState,
  reducers: {
    setViewMode: (state, action: PayloadAction<ViewMode>) => {
      state.selectedViewMode = action.payload;
    },
  },
});

export const { setViewMode } = viewModeSlice.actions;
export default viewModeSlice.reducer;

================
File: src/redux/page/pageSlice.tsx
================
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface PageState {
  currentPage: "calendar" | "dashboard" | "pomodoro";
}

const initialState: PageState = {
  currentPage: "dashboard",
};

const pageSlice = createSlice({
  name: "page",
  initialState,
  reducers: {
    setPage: (state, action: PayloadAction<PageState["currentPage"]>) => {
      state.currentPage = action.payload;
    },
  },
});

export const { setPage } = pageSlice.actions;
export default pageSlice.reducer;

================
File: src/redux/pomodoro/pomodoro.slice.tsx
================
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export interface TimerSettings {
    pomodoro: number;
    shortBreak: number;
    longBreak: number;
    autoStartBreaks: boolean;
    autoStartPomodoros: boolean;
    longBreakInterval: number;
  }
  
  export interface PomodoroState {
    settings: TimerSettings;
    mode: "focus" | "shortBreak" | "longBreak";
    time: { minutes: number; seconds: number };
    isActive: boolean;
    buttonText: "Start" | "Pause";
    progress: number;
    completedSessions: number;
  }
  
  const initialState: PomodoroState = {
    settings: {
      pomodoro: 25,
      shortBreak: 5,
      longBreak: 15,
      autoStartBreaks: false,
      autoStartPomodoros: false,
      longBreakInterval: 4,
    },
    mode: "focus",
    time: { minutes: 25, seconds: 0 },
    isActive: false,
    buttonText: "Start",
    progress: 100,
    completedSessions: 0,
  };
  
  const pomodoroSlice = createSlice({
    name: "pomodoro",
    initialState,
    reducers: {
      setSettings(state, action: PayloadAction<Partial<TimerSettings>>) {
        Object.assign(state.settings, action.payload);
      },
      changePomodoro(state, action: PayloadAction<string>) {
        state.settings.pomodoro = parseInt(action.payload) || 0;
      },
      changeShortBreak(state, action: PayloadAction<string>) {
        state.settings.shortBreak = parseInt(action.payload) || 0;
      },
      changeLongBreak(state, action: PayloadAction<string>) {
        state.settings.longBreak = parseInt(action.payload) || 0;
      },
      changeLongBreakInterval(state, action: PayloadAction<string>) {
        state.settings.longBreakInterval = parseInt(action.payload) || 0;
      },
      toggleAutoStartBreaks(state) {
        state.settings.autoStartBreaks = !state.settings.autoStartBreaks;
      },
      toggleAutoStartPomodoros(state) {
        state.settings.autoStartPomodoros = !state.settings.autoStartPomodoros;
      },
  
      setMode(state, action: PayloadAction<"focus" | "shortBreak" | "longBreak">) {
        state.mode = action.payload;
      },
      setTime(state, action: PayloadAction<{ minutes: number; seconds: number }>) {
        state.time = action.payload;
      },
      setIsActive(state, action: PayloadAction<boolean>) {
        state.isActive = action.payload;
      },
      setButtonText(state, action: PayloadAction<"Start" | "Pause">) {
        state.buttonText = action.payload;
      },
      setProgress(state, action: PayloadAction<number>) {
        state.progress = action.payload;
      },
      setCompletedSessions(state, action: PayloadAction<number>) {
        state.completedSessions = action.payload;
      },
      resetPomodoroState(state) {
        state.time = {
          minutes: state.settings.pomodoro,
          seconds: 0,
        };
        state.mode = "focus";
        state.isActive = false;
        state.buttonText = "Start";
        state.progress = 100;
        state.completedSessions = 0;
      },
    },
  });
  
  export const {
    setSettings,
    changePomodoro,
    changeShortBreak,
    changeLongBreak,
    changeLongBreakInterval,
    toggleAutoStartBreaks,
    toggleAutoStartPomodoros,
    setMode,
    setTime,
    setIsActive,
    setButtonText,
    setProgress,
    setCompletedSessions,
    resetPomodoroState,
  } = pomodoroSlice.actions;
  
  export default pomodoroSlice.reducer;

================
File: src/redux/premium/premium.slice.tsx
================
import { createSlice } from "@reduxjs/toolkit";

interface PremiumState {
  selected: "month" | "half-year" | "year" | null;
}

const initialState: PremiumState = {
  selected: "year",
};

const premiumSlice = createSlice({
  name: "premium",
  initialState,
  reducers: {
    selectPlan: (state, action) => {
      state.selected = action.payload;
    },
  },
});

export const { selectPlan } = premiumSlice.actions;
export default premiumSlice.reducer;

================
File: src/redux/store.tsx
================
import { configureStore } from "@reduxjs/toolkit";
import selectedDateReducer from "./calendar/selectedDate.slide";
import viewModeReducer from "./calendar/ViewMode";
import authReducer from "./auth/authSlice";
import taskReducer from "./calendar/task.slice";
import userReducer from "./user/user.slice";
import { useDispatch } from "react-redux";
import popupCalenReducer from "./calendar/popupCalen.slice";
import premiumReducer from "./premium/premium.slice";
import pageReducer from "./page/pageSlice";
import pomodoroRucer from "./pomodoro/pomodoro.slice"

const store = configureStore({
  reducer: {
    selectedDate: selectedDateReducer,
    viewMode: viewModeReducer,
    auth: authReducer,
    task: taskReducer,
    user: userReducer,
    popupCalen: popupCalenReducer,
    premium: premiumReducer,
    page: pageReducer,
    pomodoro: pomodoroRucer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
export const useAppDispatch: () => AppDispatch = useDispatch;

export default store;

================
File: src/redux/user/user.slice.tsx
================
import { createSlice, PayloadAction, createAsyncThunk  } from "@reduxjs/toolkit";
import axios from "@/lib/axios";
const API_URL = import.meta.env.VITE_API_URL;

interface UserState {
  username: string;
  password: string;
  email: string;
  name: string;
  gender: string;
  birth: string;
  streak: number;
  userInfoSubmitted: boolean;
  active: boolean;
}

const initialState: UserState = {
  username: "",
  password: "",
  email: "",
  name: "",
  gender: "",
  birth: "",
  streak: 0,
  userInfoSubmitted: false,
  active: false,
};

export const fetchUserData = createAsyncThunk(
  "user/fetchUserData",
  async (_, { rejectWithValue }) => {
    try {
      const response = await axios.get(`${API_URL}social/user-data`);
      return response.data;
    } catch (error: unknown) {
      if (
        typeof error === "object" &&
        error !== null &&
        "response" in error &&
        typeof (error as { response?: unknown }).response === "object"
      ) {
        const res = error as { response?: { data?: { code?: string } } };
        return rejectWithValue(res.response?.data?.code ?? "Lỗi khi lấy dữ liệu người dùng");
      }
      return rejectWithValue("Lỗi không xác định");
    }
  }
);

export const updateUserInfo = createAsyncThunk(
  "user/updateInfo",
  async (
    data: { name: string; gender: "MALE" | "FEMALE"; birth: string },
    { rejectWithValue, dispatch }
  ) => {
    try {
      const token = localStorage.getItem("accessToken");

      const res = await fetch(`${API_URL}social/user`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(data),
      });

      if (!res.ok) {
        const errorData = await res.json();
        console.error("Update error:", errorData);
        return rejectWithValue(errorData);
      }

      const result = await res.json();
      dispatch(fetchUserData());
      return result;
    } catch (err) {
      console.error("Unexpected error:", err);
      return rejectWithValue({ message: "Lỗi không xác định" });
    }
  }
);

const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {
    setUser: (_, action: PayloadAction<UserState>) => {
      return action.payload;
    },    
    clearUser: () => initialState,
  },
  extraReducers: (builder) => {
    builder
    .addCase(fetchUserData.fulfilled, (state, action) => {
      const {
        username,
        email,
        name,
        gender,
        birth,
        score: streak,
        active,
      } = action.payload.data;
    
      return {
        ...state,
        username,
        email,
        name,
        gender,
        birth: birth || "",
        streak,
        active: active ?? false,
        userInfoSubmitted: name !== "",
      };
    })    
  .addCase(fetchUserData.rejected, (state, action) => {
    const errorCode = action.payload;
  
    if (errorCode === 400001) {
      state.userInfoSubmitted = false;
      state.active = false;
    }    
  })  
  .addCase(updateUserInfo.fulfilled, (state) => {
    state.userInfoSubmitted = true;
  })
  .addCase(updateUserInfo.rejected, (state) => {
    state.userInfoSubmitted = false;
  });
  }
  
});

export const { setUser, clearUser } = userSlice.actions;
export default userSlice.reducer;

================
File: src/utils/click.tsx
================
import { useEffect, useRef } from 'react';

export function useClickOutside(callback: () => void) {
  const ref = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        callback();
      }
    }

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [callback]);

  return ref;
}

================
File: src/utils/date.tsx
================
import dayjs from "dayjs";
import "dayjs/locale/vi";

export const getCurrentDate = () => dayjs().toDate();

export const formatVietnameseDate = (date: Date) => {
  return dayjs(date).locale("vi").format("D [tháng] M, YYYY");
};

export const getMonth = (month = dayjs().month()) => {
  const year = dayjs().year();
  const firstDayOfMonth = dayjs(new Date(year, month, 1)).day();

  const arr = [];
  let currentDay = 1 - firstDayOfMonth;

  for (let week = 0; week < 6; week++) {
    const weekArr = [];
    for (let day = 0; day < 7; day++) {
      weekArr.push(dayjs(new Date(year, month, currentDay)));
      currentDay++;
    }
    arr.push(weekArr);
  }

  return arr;
};

export const formatVietnameseMonth = (date: Date): string => {
  return `Tháng ${date.getMonth() + 1}, ${date.getFullYear()}`;
};

export const getWeekDays = (selectedDay: Date) => {
  const today = dayjs();
  const startOfWeek = dayjs(selectedDay).startOf('week');
  
  return Array.from({ length: 7 }, (_, i) => {
    const day = startOfWeek.add(i, 'day');
    return {
      date: day,
      isToday: day.isSame(today, 'day'),
      isSelected: day.isSame(selectedDay, 'day'),
    };
  });
};

export const get24Hours = () => {
  const startOfDay = dayjs().startOf('day');
  return Array.from({ length: 24 }, (_, i) => startOfDay.add(i, 'hour'));
};

export const isCurrentDate = (date: dayjs.Dayjs): boolean => {
  return date.isSame(dayjs(), 'day');
};

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export const content = ["./src/**/*.{js,ts,jsx,tsx}"];
export const theme = {
    extend: {
        fontFamily: {
            custom: ["Poppins", "sans-serif"], // Custom font
        },
    },
};
export const plugins = [];

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,

    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import tailwindcss from "@tailwindcss/vite";

export default defineConfig({
  plugins: [react(), tailwindcss()],
  server: {
    proxy: {
      '/api': {
        target: "http://localhost:8080",
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path.replace(/^\/api/, ''),
      },
    },
  },
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
});



================================================================
End of Codebase
================================================================
